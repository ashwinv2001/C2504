using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MATProject.Commands;
using MATProject.Orm;
using System.Windows.Input;
using MATProject.Entities;
using MATProject.Repo;
using System.ComponentModel;
using System.Windows;

namespace MATProject.ViewModels
{
    public class CheckInViewModel : INotifyPropertyChanged
    {
        private readonly ICheckInsRepo _repository;

        // Constructor
        public CheckInViewModel(ICheckInsRepo repository)
        {
            _repository = repository;

            // Initialize collections
            Medications = new ObservableCollection<Medication>();
            CheckIns = new ObservableCollection<CheckIn>();

            // Load data
            try
            {
                LoadMedications();
                LoadCheckIns();
            }
            catch (Exception ex)
            {
                // Handle errors
                MessageBox.Show($"An error occurred: {ex.Message}");
            }

            MarkAsTakenCommand = new RelayCommand(OnMarkAsTaken);
            MarkAsMissedCommand = new RelayCommand(OnMarkAsMissed);
            ReportSideEffectsCommand = new RelayCommand(OnReportSideEffects);
        }

        // Event for property changes
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        // ObservableCollection to store medications and check-ins
        public ObservableCollection<Medication> Medications { get; set; }
        public ObservableCollection<CheckIn> CheckIns { get; set; }

        // Selected medication property
        private Medication _selectedMedication;
        public Medication SelectedMedication
        {
            get => _selectedMedication;
            set
            {
                _selectedMedication = value;
                OnPropertyChanged(nameof(SelectedMedication));
            }
        }

        // Property for side effects
        public string SideEffects { get; set; }

        // ICommand properties
        public ICommand MarkAsTakenCommand { get; }
        public ICommand MarkAsMissedCommand { get; }
        public ICommand ReportSideEffectsCommand { get; }

        // Method to load medications from the database
        private void LoadMedications()
        {
            using (var context = new MatDbEntities())
            {
                var medicationsList = context.Medications.ToList();
                Medications = new ObservableCollection<Medication>(medicationsList);

                if (!medicationsList.Any())
                {
                    Console.WriteLine("No medications found.");
                }
            }
        }

        // Method to load check-ins from the database
        private void LoadCheckIns()
        {
            using (var context = new MatDbEntities())
            {
                var checkInsList = context.CheckIns.ToList();
                CheckIns = new ObservableCollection<CheckIn>(checkInsList);

                if (!checkInsList.Any())
                {
                    Console.WriteLine("No check-ins found.");
                }
            }
        }

        // Method to mark medication as taken
        private void OnMarkAsTaken()
        {
            if (SelectedMedication != null)
            {
                int scheduleId = SelectedMedication.MedicationID;  // Assuming MedicationID is used
                _repository.LogCheckIn(SelectedMedication.MedicationID, scheduleId, "Taken");
            }
        }

        // Method to mark medication as missed
        private void OnMarkAsMissed()
        {
            if (SelectedMedication != null)
            {
                int scheduleId = SelectedMedication.MedicationID;
                _repository.LogCheckIn(SelectedMedication.MedicationID, scheduleId, "Missed");
            }
        }

        // Method to report side effects
        private void OnReportSideEffects()
        {
            if (SelectedMedication != null && !string.IsNullOrEmpty(SideEffects))
            {
                int scheduleId = SelectedMedication.MedicationID;
                _repository.LogCheckIn(SelectedMedication.MedicationID, scheduleId, "Taken", SideEffects);
            }
        }
    }
}



<Window x:Class="MATProject.Pages.CheckInWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Check In Window" Height="450" Width="800">

    <Grid>
        <DataGrid ItemsSource="{Binding CheckIns}" AutoGenerateColumns="False" 
                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <DataGrid.Columns>
                <DataGridTextColumn Header="CheckIn ID" Binding="{Binding CheckInID}" />
                <DataGridTextColumn Header="Medication ID" Binding="{Binding MedicationID}" />
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" />
                <DataGridTextColumn Header="Side Effects" Binding="{Binding SideEffects}" />
                <DataGridTextColumn Header="CheckIn Date" Binding="{Binding CheckInDate}" />
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>




public CheckInWindow(ICheckInsRepo repository)
{
    InitializeComponent();
    DataContext = new CheckInViewModel(repository);
}
