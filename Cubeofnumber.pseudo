using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MATProject.Commands;
using MATProject.Orm;
using System.Windows.Input;
using MATProject.Entities;
using MATProject.Repo;
using System.ComponentModel;
using System.Windows;

namespace MATProject.ViewModels
{
    public class CheckInViewModel : INotifyPropertyChanged
    {
        private ICheckInsRepo _checkInsRepo;

        // Add SelectedCheckIn property
        private CheckIn _selectedCheckIn;
        public CheckIn SelectedCheckIn
        {
            get => _selectedCheckIn;
            set
            {
                _selectedCheckIn = value;
                OnPropertyChanged(nameof(SelectedCheckIn));
            }
        }

        private readonly ICheckInsRepo _repository;

        // Constructor
        public CheckInViewModel(ICheckInsRepo repository)
        {
            _checkInsRepo = repository;
            _repository = repository;

            // Initialize collections
            Medications = new ObservableCollection<Medication>();
            CheckIns = new ObservableCollection<CheckIn>();

            // Load data
            MarkAsTakenCommand = new RelayCommand(MarkAsTaken, CanMarkStatus);
            MarkAsMissedCommand = new RelayCommand(MarkAsMissed, CanMarkStatus);
            ReportSideEffectsCommand = new RelayCommand(OnReportSideEffects);

            LoadMedications();
            LoadCheckIns();
        }

        // Event for property changes
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        // ObservableCollection to store medications and check-ins
        public ObservableCollection<Medication> Medications { get; set; }
        public ObservableCollection<CheckIn> CheckIns { get; set; }

        // Selected medication property
        private Medication _selectedMedication;

        public Medication SelectedMedication
        {
            get => _selectedMedication;
            set
            {
                _selectedMedication = value;
                OnPropertyChanged(nameof(SelectedMedication));
            }
        }

        // Property to store side effects from the textbox
        private string _sideEffects;
        public string SideEffects
        {
            get => _sideEffects;
            set
            {
                _sideEffects = value;
                OnPropertyChanged(nameof(SideEffects));
            }
        }

        // ICommand for reporting side effects
        public ICommand ReportSideEffectsCommand { get; }

        // Method to report side effects
        private void OnReportSideEffects()
        {
            if (SelectedCheckIn != null && !string.IsNullOrWhiteSpace(SideEffects))
            {
                SelectedCheckIn.SideEffects = SideEffects; // Update the side effects for the selected check-in
                _checkInsRepo.UpdateCheckIn(SelectedCheckIn); // Update in the repository
                _checkInsRepo.SaveChanges();
                MessageBox.Show("Side effects updated successfully.");
            }
            else
            {
                MessageBox.Show("Please enter side effects or select a check-in.");
            }
        }

        private bool CanReportSideEffects()
        {
            return SelectedCheckIn != null && !string.IsNullOrWhiteSpace(SideEffects); // Enable only when conditions are met
        }

        // ICommand properties
        public ICommand MarkAsTakenCommand { get; }
        public ICommand MarkAsMissedCommand { get; }

        // Method to mark medication as taken
        private void MarkAsTaken()
        {
            if (SelectedCheckIn != null)
            {
                SelectedCheckIn.AdherenceStatus = "Taken";
                _checkInsRepo.UpdateCheckIn(SelectedCheckIn);
                _checkInsRepo.SaveChanges();
            }
        }

        // Method to mark medication as missed
        private void MarkAsMissed()
        {
            if (SelectedCheckIn != null)
            {
                SelectedCheckIn.AdherenceStatus = "Missed";
                _checkInsRepo.UpdateCheckIn(SelectedCheckIn);
                _checkInsRepo.SaveChanges();
            }
        }

        // Method to load medications from the database
        private void LoadMedications()
        {
            using (var context = new MatDbEntities())
            {
                var medicationsList = context.Medications.ToList();
                Medications = new ObservableCollection<Medication>(medicationsList);

                if (!medicationsList.Any())
                {
                    Console.WriteLine("No medications found.");
                }
            }
        }

        // Method to load check-ins from the database
        private void LoadCheckIns()
        {
            using (var context = new MatDbEntities())
            {
                var checkInsList = context.CheckIns.ToList();
                CheckIns = new ObservableCollection<CheckIn>(_checkInsRepo.GetAllCheckIns());

                if (!checkInsList.Any())
                {
                    Console.WriteLine("No check-ins found.");
                }
            }
        }

        private bool CanMarkStatus()
        {
            return SelectedCheckIn != null;
        }
    }
}
