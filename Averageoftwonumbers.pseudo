<Window x:Class="TaskbarClicker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Taskbar Process Clicker" Height="250" Width="400">
    <Grid>
        <TextBlock Text="Enter Process ID:" VerticalAlignment="Top" Margin="10"/>
        <TextBox Name="ProcessIdTextBox" Width="200" Height="25" Margin="10,30,0,0" HorizontalAlignment="Left"/>
        <Button Content="Activate App" Width="150" Height="30" Margin="10,70,0,0" Click="ActivateApp_Click"/>
        <TextBlock Name="StatusTextBlock" Foreground="Red" Margin="10,110,0,0" TextWrapping="Wrap"/>
    </Grid>
</Window>





using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows;
using System.Windows.Automation;

namespace TaskbarClicker
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void ActivateApp_Click(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(ProcessIdTextBox.Text, out int processId))
            {
                try
                {
                    Process process = Process.GetProcessById(processId);
                    if (process == null || process.HasExited)
                    {
                        StatusTextBlock.Text = "Process not found or already closed.";
                        return;
                    }

                    if (ClickTaskbarIcon(processId))
                    {
                        StatusTextBlock.Text = "App activated!";
                        StatusTextBlock.Foreground = System.Windows.Media.Brushes.Green;
                    }
                    else
                    {
                        StatusTextBlock.Text = "Could not find taskbar icon.";
                    }
                }
                catch (Exception ex)
                {
                    StatusTextBlock.Text = "Error: " + ex.Message;
                }
            }
            else
            {
                StatusTextBlock.Text = "Invalid Process ID.";
            }
        }

        private bool ClickTaskbarIcon(int processId)
        {
            // Get Taskbar handle
            IntPtr taskbarHandle = FindWindow("Shell_TrayWnd", null);
            if (taskbarHandle == IntPtr.Zero)
            {
                StatusTextBlock.Text = "Taskbar not found.";
                return false;
            }

            // Get taskbar AutomationElement
            AutomationElement taskbar = AutomationElement.FromHandle(taskbarHandle);
            if (taskbar == null)
            {
                StatusTextBlock.Text = "Taskbar UI element not found.";
                return false;
            }

            // Find all taskbar buttons
            var buttons = taskbar.FindAll(TreeScope.Descendants, new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Button));

            foreach (AutomationElement button in buttons)
            {
                // Get the process ID associated with the button
                IntPtr hwnd = new IntPtr(button.Current.NativeWindowHandle);
                uint buttonProcessId;
                GetWindowThreadProcessId(hwnd, out buttonProcessId);

                if (buttonProcessId == processId)
                {
                    // Click the taskbar button
                    var invokePattern = button.GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;
                    invokePattern?.Invoke();
                    return true;
                }
            }

            return false;
        }

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint processId);
    }
}
