using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Automation;

namespace Wpftest2
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        private async void OnRestoreAndMaximizeClick(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(txtProcessId.Text, out int processId))
            {
                try
                {
                    IntPtr hWnd = await Task.Run(() => FindWindowByProcessId(processId));

                    if (hWnd != IntPtr.Zero)
                    {
                        SetForegroundWindow(hWnd);
                        await Task.Delay(500);

                        RestoreFromTaskbar(hWnd);
                        await Task.Delay(500); // Wait for restoration
                        MaximizeWindow(hWnd);
                    }
                    else
                    {
                        MessageBox.Show("Could not find a valid UWP window.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}", "Exception", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid Process ID.", "Invalid Input", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private IntPtr FindWindowByProcessId(int processId)
        {
            foreach (Process proc in Process.GetProcesses())
            {
                if (proc.Id == processId && proc.MainWindowHandle != IntPtr.Zero)
                {
                    return proc.MainWindowHandle;
                }
            }
            return IntPtr.Zero;
        }

        private void RestoreFromTaskbar(IntPtr hWnd)
        {
            try
            {
                AutomationElement element = AutomationElement.FromHandle(hWnd);
                if (element != null)
                {
                    // ðŸ”¹ Find the Restore button in UWP app
                    var restoreButton = element.FindFirst(
                        TreeScope.Subtree,
                        new PropertyCondition(AutomationElement.NameProperty, "Restore")
                    );

                    if (restoreButton != null)
                    {
                        InvokePattern invokePattern = restoreButton.GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;
                        invokePattern?.Invoke();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Restore Failed: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void MaximizeWindow(IntPtr hWnd)
        {
            try
            {
                AutomationElement element = AutomationElement.FromHandle(hWnd);
                if (element != null)
                {
                    var maximizeButton = element.FindFirst(
                        TreeScope.Subtree,
                        new PropertyCondition(AutomationElement.NameProperty, "Maximize")
                    );

                    if (maximizeButton != null)
                    {
                        InvokePattern invokePattern = maximizeButton.GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;
                        invokePattern?.Invoke();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Maximize Failed: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }
    }
}



<Window x:Class="Wpftest2.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="UWP Process Restorer" Height="200" Width="400"
        WindowStartupLocation="CenterScreen">
    
    <Grid>
        <TextBlock Text="Enter Process ID:" FontSize="14" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Margin="20,20,0,0"/>
        
        <TextBox x:Name="txtProcessId" Width="200" Height="25" 
                 HorizontalAlignment="Left" VerticalAlignment="Top" 
                 Margin="20,50,0,0"/>
        
        <Button Content="Restore & Maximize" Width="200" Height="30"
                HorizontalAlignment="Left" VerticalAlignment="Top"
                Margin="20,90,0,0"
                Click="OnRestoreAndMaximizeClick"/>
    </Grid>
</Window>
