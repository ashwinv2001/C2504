using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Automation; // UIAutomation for UWP apps

namespace Wpftest2
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        private async void OnMaximizeClick(object sender, RoutedEventArgs e)
        {
            await ResizeUwpWindow("Maximize");
        }

        private async void OnMinimizeClick(object sender, RoutedEventArgs e)
        {
            await ResizeUwpWindow("Minimize");
        }

        private async Task ResizeUwpWindow(string action)
        {
            if (int.TryParse(txtProcessId.Text, out int processId))
            {
                try
                {
                    IntPtr hWnd = await Task.Run(() => FindWindowByProcessId(processId));

                    if (hWnd != IntPtr.Zero)
                    {
                        SetForegroundWindow(hWnd);
                        await Task.Delay(500); // Small delay to ensure UI update
                        ControlUwpWindow(hWnd, action); // ✅ Maximize or Minimize
                    }
                    else
                    {
                        MessageBox.Show("Could not find a valid UWP/Win32 window for the given Process ID.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}", "Exception", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid Process ID.", "Invalid Input", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private IntPtr FindWindowByProcessId(int processId)
        {
            IntPtr foundWindow = IntPtr.Zero;

            // 1️⃣ First, check if it's a normal Win32 application
            foreach (Process proc in Process.GetProcesses())
            {
                if (proc.Id == processId && proc.MainWindowHandle != IntPtr.Zero)
                {
                    return proc.MainWindowHandle;
                }
            }

            // 2️⃣ If not found, check if it's a UWP app inside ApplicationFrameHost
            foundWindow = FindUwpWindow(processId);
            return foundWindow;
        }

        private IntPtr FindUwpWindow(int processId)
        {
            var frameHosts = Process.GetProcessesByName("ApplicationFrameHost");
            foreach (var frameHost in frameHosts)
            {
                IntPtr hwnd = IntPtr.Zero;

                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.Id == frameHost.Id)
                    {
                        hwnd = proc.MainWindowHandle;
                        if (hwnd != IntPtr.Zero) return hwnd;
                    }
                }
            }

            return IntPtr.Zero;
        }

        private void ControlUwpWindow(IntPtr hWnd, string action)
        {
            try
            {
                AutomationElement element = AutomationElement.FromHandle(hWnd);
                if (element != null)
                {
                    // Find the maximize or minimize button
                    string buttonName = action == "Maximize" ? "Maximize" : "Minimize";
                    var controlButton = element.FindFirst(
                        TreeScope.Subtree,
                        new PropertyCondition(AutomationElement.NameProperty, buttonName)
                    );

                    if (controlButton != null)
                    {
                        InvokePattern invokePattern = controlButton.GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;
                        invokePattern?.Invoke(); // ✅ Click Maximize or Minimize Button
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"{action} Failed: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }
    }
}




<StackPanel>
    <TextBox x:Name="txtProcessId" Width="200" Height="30" Margin="10" PlaceholderText="Enter Process ID"/>
    <Button Content="Maximize" Click="OnMaximizeClick" Width="200" Height="30" Margin="10"/>
    <Button Content="Minimize" Click="OnMinimizeClick" Width="200" Height="30" Margin="10"/>
</StackPanel>
