using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Input;

namespace MATProject.Pages
{
    public class Medication2
    {
        public string Name { get; set; }
        public string DoseStatus { get; set; }
        public ICommand MarkTakenCommand { get; }
        public ICommand MarkMissedCommand { get; }

        public Medication2()
        {
            MarkTakenCommand = new RelayCommand2(MarkTaken);
            MarkMissedCommand = new RelayCommand2(MarkMissed);
        }

        private void MarkTaken(object parameter)
        {
            DoseStatus = "Taken";
            // You can also update the status in the database here
        }

        private void MarkMissed(object parameter)
        {
            DoseStatus = "Missed";
            // You can also update the status in the database here
        }
    }

    public class CheckInViewModel
    {
        private readonly string connectionString = "YourConnectionStringHere";

        public ObservableCollection<Medication2> Medications { get; set; }
        public string SideEffectsReport { get; set; }
        public ICommand ReportSideEffectsCommand { get; }

        public CheckInViewModel()
        {
            Medications = new ObservableCollection<Medication2>();
            LoadMedications();
            ReportSideEffectsCommand = new RelayCommand2(ReportSideEffects);
        }

        private void LoadMedications()
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    SqlCommand command = new SqlCommand("SELECT Name, DoseStatus FROM Medications", connection);
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        Medications.Add(new Medication2
                        {
                            Name = reader["Name"].ToString(),
                            DoseStatus = reader["DoseStatus"].ToString()
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading medications: {ex.Message}", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ReportSideEffects(object parameter)
        {
            MessageBox.Show($"Reported side effects/issues: {SideEffectsReport}", "Side Effects Reported", MessageBoxButton.OK, MessageBoxImage.Information);
            SideEffectsReport = string.Empty;
        }
    }

    public partial class CheckInWindow : Window
    {
        public CheckInWindow()
        {
            InitializeComponent();
            DataContext = new CheckInViewModel();
        }
    }

    public class RelayCommand2 : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand2(Action<object> execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();
        public void Execute(object parameter) => _execute(parameter);

        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }
    }
}
