  private void RfParameterNotificationReceived(List<object> param, EventType type)
        {
            ((IApp)Application.Current).InnerEventLogOut(InnerEventActionType.ReceiveRequest, type, "[Debug for EventRequest][PhotoMenu.Frame.RfParameterNotificationReceived()]", param);
            // RFのSetParameterの応答としてParameterNotificationを受ける

            if (null == param || param.Count < 2)
            {
                // パラメータが無い、または2個未満の場合は何もしない
                ((IApp)Application.Current).InnerEventLogOut(InnerEventActionType.ReceiveRequest, type, "[Debug for EventRequest][PhotoMenu.Frame.NotificationParameterDisplay()] Lack of parameters.", null);
                return;
            }

            //(1.4.3.4)---> add
            bool settingResult = false;             //設定結果
            bool.TryParse(param[1].ToString(), out settingResult);
            //(1.4.3.4)---< add

            if (((IApp)Application.Current).sentAcqMode == false)
            {
                if (settingResult) //(1.4.3.4) add
                {
                    // SetParameter完了通知
                    List<object> param1 = new List<object>();
                    ((IApp)Application.Current).InnerEventLogOut(InnerEventActionType.SendRequest, EventType.RfSetParameterEndNotification, "[Debug for EventRequest][PhotoMenu.Frame.RfParameterNotificationReceived()]", param1);
                    ((IApp)Application.Current).EventRequest(EventType.RfSetParameterEndNotification, param1);
                    param1.Clear();
                }
                //(1.4.3.4)---> add
                else
                {
                    if (ExpPermissionManage.ContainsKey(ExpPermissionManage.Reason.SetGenCondSequence)) //(1.4.3.5) add
                    {
                        // SetParameterに連動した撮影禁止を解除しないようにする
                        ScreenLockManage.SetStartAcqPermissionInterlockClear(LockType.ConditionChange);
                    }
                    //(1.4.3.5)---> add
                    else
                    {
                        // SetGenCondSequenceの撮影禁止が掛かっていなかった場合（透視中は撮影禁止にしない）、禁止にする
                        ExpPermissionManage.StartProhibition(ExpPermissionManage.Reason.SetGenCondSequence);
                    }
                    //(1.4.3.5)---< add

                    // SetAcqModeを送信しない為、応答で行っている処理をここでも行う
                    // ※RXに切り替えた際、GENEの方はSetAcqModeを出さないので撮影許可が出なくなる
                    RfItem rfItem = FindRFItem(photoMenuListRF);
                    if (null == rfItem)
                    {
                        return;
                    }
                    rfItem.RecvAcqModeChanged();
                }
                //(1.4.3.4)---< add
            }
            else
            {
                // ParameterNotificationを受けてのSetAcqMode通知を再開するため元に戻す
                ((IApp)Application.Current).sentAcqMode = false;
            }
       }
