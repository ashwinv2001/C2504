public class XmlNodeViewModel : INotifyPropertyChanged
{
    private string _name;
    private bool _isEditing;

    public string Name
    {
        get => _name;
        set
        {
            if (_name != value)
            {
                _name = value;
                OnPropertyChanged(nameof(Name));
            }
        }
    }

    public bool IsEditing
    {
        get => _isEditing;
        set
        {
            if (_isEditing != value)
            {
                _isEditing = value;
                OnPropertyChanged(nameof(IsEditing));
            }
        }
    }

    // Implement INotifyPropertyChanged
    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    // Your XML element representation
    public XElement XmlElement { get; set; }
}



<Window x:Class="deserialization.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="XML Deserialization" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- File path and browse button -->
        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBox Width="400" Text="{Binding FilePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" />
            <Button Content="Browse" Command="{Binding BrowseCommand}" Width="100" Margin="10,0,0,0"/>
        </StackPanel>

        <!-- TreeView to display the XML data -->
        <TreeView x:Name="treeView" Grid.Row="1" ItemsSource="{Binding XmlTree}" 
                  SelectedItemChanged="TreeView_SelectedItemChanged" 
                  Margin="10">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <StackPanel Orientation="Horizontal">
                        <!-- Non-editing mode -->
                        <TextBlock Text="{Binding Name}" 
                                   Visibility="{Binding IsEditing, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=False}"
                                   MouseRightButtonDown="TextBlock_MouseRightButtonDown" />
                        
                        <!-- Editing mode -->
                        <TextBox Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                 Visibility="{Binding IsEditing, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}" 
                                 LostFocus="TextBox_LostFocus" 
                                 KeyDown="TextBox_KeyDown" 
                                 Width="200" />

                        <!-- Context Menu for Rename/Delete -->
                        <StackPanel.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Rename" Click="RenameMenuItem_Click" />
                                <MenuItem Header="Delete" Click="DeleteMenuItem_Click" />
                            </ContextMenu>
                        </StackPanel.ContextMenu>
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>



private void RenameMenuItem_Click(object sender, RoutedEventArgs e)
{
    if (treeView.SelectedItem is XmlNodeViewModel selectedNode)
    {
        selectedNode.IsEditing = true; // Set the node to editing mode
    }
}

// This method will handle the LostFocus event of the TextBox to save changes
private void TextBox_LostFocus(object sender, RoutedEventArgs e)
{
    if (sender is TextBox textBox && textBox.DataContext is XmlNodeViewModel node)
    {
        node.IsEditing = false; // Exit editing mode
        SaveXmlChanges(); // Save the XML changes
    }
}

// Handle the Enter key to save changes and exit editing mode
private void TextBox_KeyDown(object sender, KeyEventArgs e)
{
    if (e.Key == Key.Enter && sender is TextBox textBox && textBox.DataContext is XmlNodeViewModel node)
    {
        node.IsEditing = false; // Exit editing mode
        SaveXmlChanges(); // Save the XML changes
    }
}

// Save XML changes to file
private void SaveXmlChanges()
{
    // Logic to save the XML file
    // For example:
    // XDocument doc = XDocument.Load("yourfile.xml");
    // doc.Save("yourfile.xml");
}
