using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows.Input;
using Microsoft.Win32;
using System.Xml.Linq;

namespace deserialization
{
    public class MainWindowViewModel : BaseViewModel
    {
        public string FilePath { get; set; }
        public ObservableCollection<XmlNodeViewModel> XmlTree { get; set; } = new ObservableCollection<XmlNodeViewModel>();

        private XmlNodeViewModel _selectedNode;
        public XmlNodeViewModel SelectedNode
        {
            get => _selectedNode;
            set
            {
                _selectedNode = value;
                OnPropertyChanged(nameof(SelectedNode));
                UpdateCanRenameDelete();
            }
        }

        private bool _canRenameDelete;
        public bool CanRenameDelete
        {
            get => _canRenameDelete;
            set
            {
                _canRenameDelete = value;
                OnPropertyChanged(nameof(CanRenameDelete));
                ((RelayCommand)RenameCommand).RaiseCanExecuteChanged();
                ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
            }
        }

        public ICommand BrowseCommand { get; }
        public ICommand RenameCommand { get; }
        public ICommand DeleteCommand { get; }

        private XDocument _xmlDocument;

        public MainWindowViewModel()
        {
            BrowseCommand = new RelayCommand(OpenFileDialog);
            RenameCommand = new RelayCommand(RenameNode, () => CanRenameDelete);
            DeleteCommand = new RelayCommand(DeleteNode, () => CanRenameDelete);
        }

        private void OpenFileDialog()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "XML files (*.xml)|*.xml"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                FilePath = openFileDialog.FileName;
                OnPropertyChanged(nameof(FilePath));
                LoadXmlTree(FilePath);
            }
        }

        private void LoadXmlTree(string filePath)
        {
            XmlTree.Clear();

            if (File.Exists(filePath))
            {
                _xmlDocument = XDocument.Load(filePath);
                XmlTree.Add(new XmlNodeViewModel(_xmlDocument.Root));
                OnPropertyChanged(nameof(XmlTree));
            }
        }

        private void UpdateCanRenameDelete()
        {
            CanRenameDelete = SelectedNode != null;
        }

        private void RenameNode()
        {
            if (SelectedNode != null)
            {
                string newName = PromptForInput("Enter new name for the node:", SelectedNode.Name);
                if (!string.IsNullOrEmpty(newName))
                {
                    // Rename in the ViewModel
                    SelectedNode.Name = newName;

                    // Rename in the actual XML
                    var element = SelectedNode.XmlElement;
                    if (element != null)
                    {
                        element.Name = newName;
                        SaveXmlChanges();
                    }

                    OnPropertyChanged(nameof(XmlTree));
                }
            }
        }

        private void DeleteNode()
        {
            if (SelectedNode != null && SelectedNode.XmlElement != null)
            {
                var parentElement = SelectedNode.XmlElement.Parent;
                if (parentElement != null)
                {
                    // Remove the selected element from the XML document
                    SelectedNode.XmlElement.Remove();
                    SaveXmlChanges();

                    // Remove the node from the ViewModel
                    var parentViewModel = FindParentNode(SelectedNode);
                    parentViewModel?.Children.Remove(SelectedNode);

                    OnPropertyChanged(nameof(XmlTree));
                }
            }
        }

        private void SaveXmlChanges()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                _xmlDocument.Save(FilePath); // Save the updated XML document
            }
        }

        private XmlNodeViewModel FindParentNode(XmlNodeViewModel node)
        {
            foreach (var rootNode in XmlTree)
            {
                var parent = FindParentRecursive(rootNode, node);
                if (parent != null)
                    return parent;
            }
            return null;
        }

        private XmlNodeViewModel FindParentRecursive(XmlNodeViewModel current, XmlNodeViewModel search)
        {
            foreach (var child in current.Children)
            {
                if (child == search)
                    return current;
                var result = FindParentRecursive(child, search);
                if (result != null)
                    return result;
            }
            return null;
        }

        private string PromptForInput(string message, string defaultInput = "")
        {
            InputDialog inputDialog = new InputDialog(defaultInput);
            return inputDialog.ShowDialog() == true ? inputDialog.InputText : null;
        }
    }
}






using System;
using System.Windows.Input;

namespace deserialization
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();

        public void Execute(object parameter) => _execute();

        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }

        public void RaiseCanExecuteChanged() => CommandManager.InvalidateRequerySuggested();
    }
}








using System.Collections.ObjectModel;
using System.Xml.Linq;

namespace deserialization
{
    public class XmlNodeViewModel : BaseViewModel
    {
        private XElement _xmlElement;
        public XElement XmlElement
        {
            get => _xmlElement;
            set
            {
                _xmlElement = value;
                OnPropertyChanged(nameof(XmlElement));
            }
        }

        public ObservableCollection<XmlNodeViewModel> Children { get; set; } = new ObservableCollection<XmlNodeViewModel>();

        private string _name;
        public string Name
        {
            get => _name;
            set
            {
                _name = value;
                OnPropertyChanged(nameof(Name));
            }
        }

        public XmlNodeViewModel(XElement element)
        {
            XmlElement = element;
            Name = element.Name.LocalName;
            foreach (var child in element.Elements())
            {
                Children.Add(new XmlNodeViewModel(child));
            }
        }
    }
}





using System.Windows;
using System.Windows.Controls;

namespace deserialization
{
    public partial class InputDialog : Window
    {
        public string InputText { get; private set; }

        public InputDialog(string defaultInput = "")
        {
            InitializeComponent();
            InputTextBox.Text = defaultInput;
        }

        private void OkButton_Click(object sender, RoutedEventArgs e)
        {
            InputText = InputTextBox.Text;
            DialogResult = true;
            Close();
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}





<Window x:Class="deserialization.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:deserialization"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Browse and TreeView -->
        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
            <TextBox Width="500" Text="{Binding FilePath}" IsReadOnly="True" />
            <Button Content="Browse" Width="100" Command="{Binding BrowseCommand}" />
        </StackPanel>

        <!-- TreeView -->
        <TreeView Grid.Row="1" ItemsSource="{Binding XmlTree}" 
                  SelectedItemChanged="TreeView_SelectedItemChanged" 
                  Margin="10">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <TextBlock Text="{Binding Name}" />
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>

        <!-- Rename and Delete Buttons -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="10">
            <Button Content="Rename" Width="100" Command="{Binding RenameCommand}" IsEnabled="{Binding CanRenameDelete}" />
            <Button Content="Delete" Width="100" Command="{Binding DeleteCommand}" IsEnabled="{Binding CanRenameDelete}" />
        </StackPanel>
    </Grid>
</Window>







