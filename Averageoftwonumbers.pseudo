using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Automation;

namespace Wpftest2
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        private void OnResizeClick(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(txtProcessId.Text, out int processId))
            {
                try
                {
                    IntPtr hWnd = FindUwpWindow(processId);

                    if (hWnd != IntPtr.Zero)
                    {
                        SetForegroundWindow(hWnd);
                        ShowWindow(hWnd, 3); // SW_MAXIMIZE
                    }
                    else
                    {
                        MessageBox.Show("Could not find a valid UWP window.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}", "Exception", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid Process ID.", "Invalid Input", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private IntPtr FindUwpWindow(int processId)
        {
            AutomationElement desktop = AutomationElement.RootElement;
            foreach (AutomationElement window in desktop.FindAll(TreeScope.Children, Condition.TrueCondition))
            {
                int windowPid = 0;
                IntPtr hWnd = new IntPtr(window.Current.NativeWindowHandle);
                
                if (hWnd != IntPtr.Zero)
                {
                    Process process = Process.GetProcessById(processId);
                    if (process.MainWindowHandle == hWnd)
                    {
                        return hWnd; // Found correct window
                    }
                }
            }
            return IntPtr.Zero;
        }
    }
}
