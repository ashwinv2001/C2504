<Window x:Class="MinimizeApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Minimize App" Height="200" Width="300">
    <Grid>
        <TextBox x:Name="txtPID" Width="150" Height="30" Margin="10" HorizontalAlignment="Left"/>
        <Button Content="Minimize" Width="100" Height="30" Margin="170,10,10,10"
                Click="Minimize_Click"/>
    </Grid>
</Window>






using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Automation;

namespace MinimizeApp
{
    public partial class MainWindow : Window
    {
        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        private const int SW_MINIMIZE = 6; // Command to minimize the window

        public MainWindow()
        {
            InitializeComponent();
        }

        private void Minimize_Click(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(txtPID.Text, out int pid))
            {
                try
                {
                    Process process = Process.GetProcessById(pid);
                    IntPtr hWnd = process.MainWindowHandle;

                    if (hWnd == IntPtr.Zero)
                    {
                        // Use UIAutomation to get the UWP window
                        hWnd = GetUwpWindowHandle(pid);
                    }

                    if (hWnd != IntPtr.Zero)
                    {
                        ShowWindow(hWnd, SW_MINIMIZE);
                    }
                    else
                    {
                        MessageBox.Show("Window handle not found!");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid PID.");
            }
        }

        private IntPtr GetUwpWindowHandle(int pid)
        {
            try
            {
                var rootElement = AutomationElement.RootElement;
                foreach (AutomationElement element in rootElement.FindAll(TreeScope.Children, Condition.TrueCondition))
                {
                    int elementPid;
                    element.GetCurrentPropertyValue(AutomationElement.ProcessIdProperty, out elementPid);

                    if (elementPid == pid)
                    {
                        return new IntPtr(element.Current.NativeWindowHandle);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error getting UWP window: {ex.Message}");
            }

            return IntPtr.Zero;
        }
    }
}
