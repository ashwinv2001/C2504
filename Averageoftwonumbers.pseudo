<Window x:Class="MedicineTracker.SettingsPage"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Settings" Height="350" Width="400">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Title -->
        <TextBlock Text="Application Settings" FontWeight="Bold" FontSize="18" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,10,0,20" />

        <!-- Notification Frequency -->
        <StackPanel Grid.Row="1" Margin="10">
            <TextBlock Text="Notification Frequency:" FontWeight="Bold" />
            <ComboBox ItemsSource="{Binding NotificationFrequencies}" SelectedItem="{Binding SelectedNotificationFrequency}" />
            
            <!-- Reminder Methods -->
            <TextBlock Text="Reminder Methods:" FontWeight="Bold" Margin="0,20,0,0" />
            <CheckBox Content="Email" IsChecked="{Binding IsEmailReminderEnabled}" />
            <CheckBox Content="SMS" IsChecked="{Binding IsSmsReminderEnabled}" />
            <CheckBox Content="App Notification" IsChecked="{Binding IsAppReminderEnabled}" />

            <!-- Time Zone Settings -->
            <TextBlock Text="Time Zone:" FontWeight="Bold" Margin="0,20,0,0" />
            <ComboBox ItemsSource="{Binding TimeZones}" SelectedItem="{Binding SelectedTimeZone}" />

            <!-- Save Button -->
            <Button Content="Save Settings" HorizontalAlignment="Right" Margin="0,30,0,0" Width="120" Command="{Binding SaveSettingsCommand}" />
        </StackPanel>
    </Grid>
</Window>



using System.Windows;

namespace MedicineTracker
{
    public partial class SettingsPage : Window
    {
        public SettingsPage()
        {
            InitializeComponent();
            DataContext = new SettingsViewModel();
        }
    }
}




using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;

namespace MedicineTracker
{
    public class SettingsViewModel : INotifyPropertyChanged
    {
        // Properties for Notification Frequency
        public ObservableCollection<string> NotificationFrequencies { get; set; }
        private string _selectedNotificationFrequency;
        public string SelectedNotificationFrequency
        {
            get { return _selectedNotificationFrequency; }
            set
            {
                _selectedNotificationFrequency = value;
                OnPropertyChanged(nameof(SelectedNotificationFrequency));
            }
        }

        // Properties for Reminder Methods
        private bool _isEmailReminderEnabled;
        public bool IsEmailReminderEnabled
        {
            get { return _isEmailReminderEnabled; }
            set
            {
                _isEmailReminderEnabled = value;
                OnPropertyChanged(nameof(IsEmailReminderEnabled));
            }
        }

        private bool _isSmsReminderEnabled;
        public bool IsSmsReminderEnabled
        {
            get { return _isSmsReminderEnabled; }
            set
            {
                _isSmsReminderEnabled = value;
                OnPropertyChanged(nameof(IsSmsReminderEnabled));
            }
        }

        private bool _isAppReminderEnabled;
        public bool IsAppReminderEnabled
        {
            get { return _isAppReminderEnabled; }
            set
            {
                _isAppReminderEnabled = value;
                OnPropertyChanged(nameof(IsAppReminderEnabled));
            }
        }

        // Properties for Time Zones
        public ObservableCollection<string> TimeZones { get; set; }
        private string _selectedTimeZone;
        public string SelectedTimeZone
        {
            get { return _selectedTimeZone; }
            set
            {
                _selectedTimeZone = value;
                OnPropertyChanged(nameof(SelectedTimeZone));
            }
        }

        // Save Settings Command
        public ICommand SaveSettingsCommand { get; }

        public SettingsViewModel()
        {
            // Sample data for Notification Frequency and Time Zones
            NotificationFrequencies = new ObservableCollection<string> { "Daily", "Weekly", "Monthly" };
            TimeZones = new ObservableCollection<string>(TimeZoneInfo.GetSystemTimeZones().Select(tz => tz.DisplayName));

            SaveSettingsCommand = new RelayCommand(SaveSettings);
        }

        // Save settings logic
        private void SaveSettings(object parameter)
        {
            MessageBox.Show("Settings have been saved.", "Save", MessageBoxButton.OK, MessageBoxImage.Information);
            // Here you could save settings to a file, database, or user preferences.
        }

        // PropertyChanged Event Handling
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // RelayCommand class for handling commands
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Predicate<object> _canExecute;

        public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute?.Invoke(parameter) ?? true;

        public void Execute(object parameter) => _execute(parameter);

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}



