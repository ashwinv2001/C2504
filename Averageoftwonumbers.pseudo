public interface IAccountRepo
{
    ObservableCollection<Account> ReadAll();
    void Add(Account account);       // Add method
    void Update(Account account);    // Update method
    void Delete(Account account);    // Delete method
}






public class AccountMemoryRepo : IAccountRepo
{
    private ObservableCollection<Account> _accounts = new ObservableCollection<Account>();

    public ObservableCollection<Account> ReadAll()
    {
        return _accounts;
    }

    public void Add(Account account)
    {
        if (!_accounts.Contains(account))
        {
            _accounts.Add(account);
        }
    }

    public void Update(Account account)
    {
        var existingAccount = _accounts.FirstOrDefault(a => a.Id == account.Id);
        if (existingAccount != null)
        {
            // Update properties of the existing account here, e.g.:
            existingAccount.Name = account.Name;
            existingAccount.InterestPercentage = account.InterestPercentage;
            // Add other properties as needed
        }
    }

    public void Delete(Account account)
    {
        if (_accounts.Contains(account))
        {
            _accounts.Remove(account);
        }
    }
}
