using System.Collections.ObjectModel;

namespace WpfXmlTreeViewer.MVVM.Model
{
    public class Node
    {
        public string Name { get; set; }
        public ObservableCollection<Node> Children { get; set; } = new ObservableCollection<Node>();
    }
}








using Microsoft.Win32;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows.Input;
using System.Xml.Linq;
using WpfXmlTreeViewer.MVVM.Model;

namespace WpfXmlTreeViewer.MVVM.ViewModel
{
    public class MainViewModel : BaseViewModel
    {
        private string _filePath;
        public string FilePath
        {
            get => _filePath;
            set
            {
                _filePath = value;
                OnPropertyChanged(nameof(FilePath));
            }
        }

        public ObservableCollection<Node> XmlTree { get; set; } = new ObservableCollection<Node>();

        public ICommand BrowseCommand { get; }

        public MainViewModel()
        {
            BrowseCommand = new RelayCommand(BrowseFile);
        }

        private void BrowseFile()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml",
                Title = "Select an XML File"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                FilePath = openFileDialog.FileName;

                if (File.Exists(FilePath))
                {
                    DeserializeXml(FilePath);
                }
            }
        }

        private void DeserializeXml(string filePath)
        {
            XmlTree.Clear();

            // Load XML and convert it to a tree structure
            XDocument xDocument = XDocument.Load(filePath);
            Node root = ConvertToNode(xDocument.Root);
            XmlTree.Add(root);
        }

        private Node ConvertToNode(XElement element)
        {
            Node node = new Node { Name = element.Name.LocalName };

            foreach (XElement child in element.Elements())
            {
                node.Children.Add(ConvertToNode(child));
            }

            return node;
        }
    }
}





using System;
using System.Windows.Input;

namespace WpfXmlTreeViewer
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public event EventHandler CanExecuteChanged;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();

        public void Execute(object parameter) => _execute();

        public void RaiseCanExecuteChanged() => CanExecuteChanged?.Invoke(this, EventArgs.Empty);
    }
}





using System.ComponentModel;

namespace WpfXmlTreeViewer
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}




<Window x:Class="WpfXmlTreeViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfXmlTreeViewer"
        mc:Ignorable="d"
        Title="XML Tree Viewer" Height="450" Width="800">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Browse Section -->
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <TextBox Width="600" Text="{Binding FilePath}" IsReadOnly="True" Margin="0,0,10,0"/>
            <Button Content="Browse" Command="{Binding BrowseCommand}" Width="100"/>
        </StackPanel>

        <!-- TreeView -->
        <TreeView Grid.Row="1" ItemsSource="{Binding XmlTree}">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <TextBlock Text="{Binding Name}"/>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>




using System.Windows;

namespace WpfXmlTreeViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MVVM.ViewModel.MainViewModel();
        }
    }
}
