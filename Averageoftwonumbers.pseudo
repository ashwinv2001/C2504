using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows;
using System.Windows.Input;
using System.Xml.Linq;
using Microsoft.Win32;

namespace deserialization
{
    public class MainWindowViewModel : BaseViewModel
    {
        public string FilePath { get; set; }
        public ObservableCollection<XmlNodeViewModel> XmlTree { get; set; } = new ObservableCollection<XmlNodeViewModel>();

        private XmlNodeViewModel _selectedNode;
        public XmlNodeViewModel SelectedNode
        {
            get => _selectedNode;
            set
            {
                if (_selectedNode != value)
                {
                    _selectedNode = value;
                    OnPropertyChanged(nameof(SelectedNode));
                    UpdateCanRenameDelete();
                }
            }
        }

        private bool _canRenameDelete;
        public bool CanRenameDelete
        {
            get => _canRenameDelete;
            set
            {
                if (_canRenameDelete != value)
                {
                    _canRenameDelete = value;
                    OnPropertyChanged(nameof(CanRenameDelete));
                    ((RelayCommand)RenameCommand).RaiseCanExecuteChanged();
                    ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
                }
            }
        }

        public ICommand BrowseCommand { get; }
        public ICommand RenameCommand { get; }
        public ICommand DeleteCommand { get; }

        private XDocument _xmlDocument;

        public MainWindowViewModel()
        {
            BrowseCommand = new RelayCommand(OpenFileDialog);
            RenameCommand = new RelayCommand(RenameNode, () => CanRenameDelete);
            DeleteCommand = new RelayCommand(DeleteNode, () => CanRenameDelete);
        }

        private void OpenFileDialog()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "XML files (*.xml)|*.xml"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                FilePath = openFileDialog.FileName;
                OnPropertyChanged(nameof(FilePath));
                LoadXmlTree(FilePath);
            }
        }

        private void LoadXmlTree(string filePath)
        {
            XmlTree.Clear();

            if (File.Exists(filePath))
            {
                try
                {
                    _xmlDocument = XDocument.Load(filePath);
                    XmlTree.Add(new XmlNodeViewModel(_xmlDocument.Root));
                    OnPropertyChanged(nameof(XmlTree));
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error loading XML: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void RenameNode()
        {
            if (SelectedNode != null)
            {
                string newName = PromptForInput("Enter new name for the node:", SelectedNode.Name);
                if (!string.IsNullOrEmpty(newName))
                {
                    // Rename in the ViewModel
                    SelectedNode.Name = newName;

                    // Rename in the actual XML element
                    var element = SelectedNode.XmlElement;
                    if (element != null)
                    {
                        try
                        {
                            // Rename the XML element in the original XML document
                            element.Name = XName.Get(newName);
                            SaveXmlChanges();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show($"Error renaming XML node: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                    }

                    // Notify UI of changes
                    OnPropertyChanged(nameof(XmlTree));
                }
            }
        }

        private void DeleteNode()
        {
            if (SelectedNode != null && SelectedNode.XmlElement != null)
            {
                var parentElement = SelectedNode.XmlElement.Parent;
                if (parentElement != null)
                {
                    // Remove the selected element from the XML document
                    SelectedNode.XmlElement.Remove();
                    SaveXmlChanges();

                    // Remove the node from the ViewModel
                    var parentViewModel = FindParentNode(SelectedNode);
                    parentViewModel?.Children.Remove(SelectedNode);

                    OnPropertyChanged(nameof(XmlTree));
                }
            }
        }

        private void SaveXmlChanges()
        {
            if (!string.IsNullOrEmpty(FilePath))
            {
                try
                {
                    _xmlDocument.Save(FilePath); // Save the updated XML document
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error saving XML: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private XmlNodeViewModel FindParentNode(XmlNodeViewModel node)
        {
            foreach (var rootNode in XmlTree)
            {
                var parent = FindParentRecursive(rootNode, node);
                if (parent != null)
                    return parent;
            }
            return null;
        }

        private XmlNodeViewModel FindParentRecursive(XmlNodeViewModel current, XmlNodeViewModel search)
        {
            foreach (var child in current.Children)
            {
                if (child == search)
                    return current;
                var result = FindParentRecursive(child, search);
                if (result != null)
                    return result;
            }
            return null;
        }

        private string PromptForInput(string message, string defaultInput = "")
        {
            InputDialog inputDialog = new InputDialog(defaultInput);
            return inputDialog.ShowDialog() == true ? inputDialog.InputText : null;
        }

        private void UpdateCanRenameDelete()
        {
            CanRenameDelete = SelectedNode != null;
        }
    }
}





using System.Collections.ObjectModel;
using System.Xml.Linq;

namespace deserialization
{
    public class XmlNodeViewModel : BaseViewModel
    {
        public XNode XmlNode { get; }
        public XElement XmlElement => XmlNode as XElement;

        private string _name;
        public string Name
        {
            get => _name;
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged(nameof(Name));
                }
            }
        }

        public ObservableCollection<XmlNodeViewModel> Children { get; } = new ObservableCollection<XmlNodeViewModel>();

        public XmlNodeViewModel(XElement element)
        {
            XmlNode = element;
            Name = element.Name.LocalName;

            foreach (var child in element.Elements())
            {
                Children.Add(new XmlNodeViewModel(child));
            }
        }
    }
}
