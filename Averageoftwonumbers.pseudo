<Window x:Class="XmlTreeViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="XML Viewer" Height="450" Width="800">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Input and Browse Section -->
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <TextBox Text="{Binding SelectedFilePath}" Width="600" IsReadOnly="True" Margin="0,0,10,0"/>
            <Button Content="Browse" Command="{Binding BrowseCommand}" Width="100"/>
        </StackPanel>
        
        <!-- TreeView Section -->
        <TreeView ItemsSource="{Binding XmlTree}" Grid.Row="1">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <TextBlock Text="{Binding Name}"/>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>






using Microsoft.Win32;
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows.Input;
using System.Xml.Linq;

namespace XmlTreeViewer
{
    public class MainWindowViewModel
    {
        public string SelectedFilePath { get; set; }
        public ObservableCollection<XmlNode> XmlTree { get; set; }
        public ICommand BrowseCommand { get; }

        public MainWindowViewModel()
        {
            XmlTree = new ObservableCollection<XmlNode>();
            BrowseCommand = new RelayCommand(OpenFileDialog);
        }

        private void OpenFileDialog()
        {
            var dialog = new OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml|All Files (*.*)|*.*"
            };

            if (dialog.ShowDialog() == true)
            {
                SelectedFilePath = dialog.FileName;
                LoadXml(SelectedFilePath);
            }
        }

        private void LoadXml(string filePath)
        {
            try
            {
                XmlTree.Clear();
                var document = XDocument.Load(filePath);
                XmlTree.Add(CreateNode(document.Root));
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show($"Error: {ex.Message}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        private XmlNode CreateNode(XElement element)
        {
            var node = new XmlNode
            {
                Name = element.Name.LocalName
            };

            foreach (var attribute in element.Attributes())
            {
                node.Children.Add(new XmlNode { Name = $"@{attribute.Name} = {attribute.Value}" });
            }

            foreach (var child in element.Elements())
            {
                node.Children.Add(CreateNode(child));
            }

            return node;
        }
    }

    public class XmlNode
    {
        public string Name { get; set; }
        public ObservableCollection<XmlNode> Children { get; set; } = new ObservableCollection<XmlNode>();
    }
}




using System;
using System.Windows.Input;

namespace XmlTreeViewer
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute?.Invoke() ?? true;

        public void Execute(object parameter) => _execute();

        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }
    }
}



using System.Windows;

namespace XmlTreeViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainWindowViewModel();
        }
    }
}
