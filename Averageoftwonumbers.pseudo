<Window x:Class="SimpleCalculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Simple Calculator" Height="250" Width="300">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <TextBox Width="100" Text="{Binding Number1}" Margin="0,0,10,0"/>
            <TextBox Width="100" Text="{Binding Number2}"/>
        </StackPanel>

        <StackPanel Orientation="Horizontal" Grid.Row="1" Margin="0,0,0,10">
            <Button Content="Add" Width="60" Margin="0,0,10,0" Command="{Binding AddCommand}"/>
            <Button Content="Subtract" Width="80" Command="{Binding SubtractCommand}"/>
        </StackPanel>

        <TextBlock Grid.Row="2" FontSize="16" FontWeight="Bold" 
                   Text="{Binding Result, StringFormat='Result: {0}'}"
                   Margin="0,10,0,0"/>
    </Grid>
</Window>











using System.Windows;

namespace SimpleCalculator
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new CalculatorViewModel();
        }
    }
}









using System.ComponentModel;
using System.Windows.Input;

namespace SimpleCalculator
{
    public class CalculatorViewModel : INotifyPropertyChanged
    {
        private string _number1;
        private string _number2;
        private string _result;

        public string Number1
        {
            get => _number1;
            set { _number1 = value; OnPropertyChanged(nameof(Number1)); }
        }

        public string Number2
        {
            get => _number2;
            set { _number2 = value; OnPropertyChanged(nameof(Number2)); }
        }

        public string Result
        {
            get => _result;
            set { _result = value; OnPropertyChanged(nameof(Result)); }
        }

        public ICommand AddCommand { get; }
        public ICommand SubtractCommand { get; }

        public CalculatorViewModel()
        {
            AddCommand = new RelayCommand(ExecuteAdd);
            SubtractCommand = new RelayCommand(ExecuteSubtract);
        }

        private void ExecuteAdd(object obj)
        {
            if (double.TryParse(Number1, out double num1) && double.TryParse(Number2, out double num2))
                Result = (num1 + num2).ToString();
            else
                Result = "Invalid Input";
        }

        private void ExecuteSubtract(object obj)
        {
            if (double.TryParse(Number1, out double num1) && double.TryParse(Number2, out double num2))
                Result = (num1 - num2).ToString();
            else
                Result = "Invalid Input";
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string name) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }

    public class RelayCommand : ICommand
    {
        private readonly System.Action<object> _execute;
        private readonly System.Func<object, bool> _canExecute;

        public RelayCommand(System.Action<object> execute, System.Func<object, bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute(parameter);
        public void Execute(object parameter) => _execute(parameter);
        public event System.EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }
    }
}
