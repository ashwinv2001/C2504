using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action<object> _execute;
    private readonly Predicate<object> _canExecute;

    public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
    {
        _execute = execute ?? throw new ArgumentNullException(nameof(execute));
        _canExecute = canExecute;
    }

    public bool CanExecute(object parameter) => _canExecute == null || _canExecute(parameter);
    public void Execute(object parameter) => _execute(parameter);
    public event EventHandler CanExecuteChanged
    {
        add => CommandManager.RequerySuggested += value;
        remove => CommandManager.RequerySuggested -= value;
    }
}





using System;
using System.ComponentModel;
using System.IO;
using System.Windows.Input;
using System.Xml.Serialization;
using Microsoft.Win32;
using System.Collections.ObjectModel;

public class MainViewModel : INotifyPropertyChanged
{
    private string _filePath;
    private Repository _repository;

    public string FilePath
    {
        get => _filePath;
        set
        {
            _filePath = value;
            OnPropertyChanged(nameof(FilePath));
        }
    }

    public Repository RepositoryData
    {
        get => _repository;
        set
        {
            _repository = value;
            OnPropertyChanged(nameof(RepositoryData));
        }
    }

    public ICommand BrowseCommand { get; }

    public MainViewModel()
    {
        BrowseCommand = new RelayCommand(ExecuteBrowse);
    }

    private void ExecuteBrowse(object obj)
    {
        OpenFileDialog openFileDialog = new OpenFileDialog
        {
            Filter = "XML files (*.xml)|*.xml",
            Title = "Select an XML file"
        };

        if (openFileDialog.ShowDialog() == true)
        {
            FilePath = openFileDialog.FileName;
            RepositoryData = LoadRepository(FilePath);
        }
    }

    private Repository LoadRepository(string xmlFilePath)
    {
        try
        {
            XmlSerializer serializer = new XmlSerializer(typeof(Repository));
            using (FileStream fileStream = new FileStream(xmlFilePath, FileMode.Open))
            {
                return (Repository)serializer.Deserialize(fileStream);
            }
        }
        catch (Exception ex)
        {
            // Handle errors (e.g., show a message to the user)
            Console.WriteLine($"Error loading XML file: {ex.Message}");
            return null;
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}





<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="XML Viewer" Height="450" Width="800">
    <Window.DataContext>
        <local:MainViewModel />
    </Window.DataContext>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- File Path TextBox and Browse Button -->
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <TextBox Width="400" Text="{Binding FilePath}" IsReadOnly="True" Margin="0,0,10,0"/>
            <Button Content="Browse" Command="{Binding BrowseCommand}" Width="100"/>
        </StackPanel>

        <!-- TreeView for displaying XML structure -->
        <TreeView Grid.Row="1" ItemsSource="{Binding RepositoryData.Titles}">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding ControlInfos}">
                    <TextBlock Text="{Binding Value}" />
                    <HierarchicalDataTemplate.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding DisplayName}" />
                        </DataTemplate>
                    </HierarchicalDataTemplate.ItemTemplate>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>
