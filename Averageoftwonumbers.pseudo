namespace BankManagementSystem.ViewModels
{
    public delegate void DWidnowClose();

    public class AccountViewModel : ViewModelBase
    {
        private Account _newAccount;
        private Account _selectedAccount;
        private ObservableCollection<Account> _filteredAccounts;

        public DWidnowClose NewWindowClose { get; set; }
        public DWidnowClose EditWindowClose { get; set; }

        private readonly IAccountRepo _repo;

        public Account NewAccount
        {
            get => _newAccount;
            set
            {
                _newAccount = value;
                onPropertyChanged(nameof(NewAccount));
            }
        }

        public Account SelectedAccount
        {
            get => _selectedAccount;
            set
            {
                _selectedAccount = value;
                onPropertyChanged(nameof(SelectedAccount));
            }
        }

        public ObservableCollection<Account> Accounts => _repo.ReadAll();

        public ObservableCollection<Account> FilteredAccounts
        {
            get => _filteredAccounts;
            set
            {
                _filteredAccounts = value;
                onPropertyChanged(nameof(FilteredAccounts));
            }
        }

        public ICommand CreateCommand { get; }
        public ICommand UpdateCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ApplyFilterCommand { get; }

        public AccountViewModel(IAccountRepo repo = null)
        {
            _repo = repo ?? AccountMemoryRepo.Instance;
            _filteredAccounts = new ObservableCollection<Account>(Accounts);
            CreateCommand = new RelayCommand(Create);
            UpdateCommand = new RelayCommand(Update);
            DeleteCommand = new RelayCommand(Delete);
            ApplyFilterCommand = new RelayCommand<string>(ApplyFilter);
        }

        public void ApplyFilter(string interestRateFilter)
        {
            if (double.TryParse(interestRateFilter, out double interestRate))
            {
                FilteredAccounts = new ObservableCollection<Account>(
                    Accounts.Where(acc => double.TryParse(acc.InterestPercentage, out double rate) && rate >= interestRate));
            }
            else
            {
                MessageBox.Show("Invalid Interest Rate entered. Please enter a valid number.");
            }
        }

        public void Create()
        {
            if (NewAccount != null)
            {
                _repo.Add(NewAccount);
                FilteredAccounts.Add(NewAccount);
                NewAccount = new Account();
                MessageBox.Show("Account created successfully!");
            }
            else
            {
                MessageBox.Show("Account creation failed. Please fill in all details.");
            }
        }

        public void Update()
        {
            if (SelectedAccount != null)
            {
                _repo.Update(SelectedAccount);
                MessageBox.Show("Account updated successfully!");
            }
            else
            {
                MessageBox.Show("Please select an account to update.");
            }
        }

        public void Delete()
        {
            if (SelectedAccount != null)
            {
                _repo.Delete(SelectedAccount);
                FilteredAccounts.Remove(SelectedAccount);
                MessageBox.Show("Account deleted successfully!");
            }
            else
            {
                MessageBox.Show("Please select an account to delete.");
            }
        }
    }
}
