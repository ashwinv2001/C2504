public class Medication : INotifyPropertyChanged
{
    private string _name;
    private DateTime _time;
    private bool _isTaken;

    public string Name
    {
        get => _name;
        set
        {
            _name = value;
            OnPropertyChanged("Name");
        }
    }

    public DateTime Time
    {
        get => _time;
        set
        {
            _time = value;
            OnPropertyChanged("Time");
        }
    }

    public bool IsTaken
    {
        get => _isTaken;
        set
        {
            _isTaken = value;
            OnPropertyChanged("IsTaken");
            OnPropertyChanged("DisplaySymbol");
        }
    }

    // This property will display either a ✔ or ❌ based on the IsTaken status
    public string DisplaySymbol
    {
        get => IsTaken ? "✔" : "❌";
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}





<DataGrid x:Name="MedicationDataGrid" AutoGenerateColumns="False" ItemsSource="{Binding Medications}">
    <DataGrid.Columns>
        <DataGridTextColumn Header="Medication" Binding="{Binding Name}" Width="*"/>
        <DataGridTextColumn Header="Time" Binding="{Binding Time, StringFormat={}{0:HH:mm}}" Width="*"/>
        <DataGridTextColumn Header="Taken" Binding="{Binding DisplaySymbol}" Width="*"/>
    </DataGrid.Columns>
</DataGrid>




private void CheckAdherence_Click(object sender, RoutedEventArgs e)
{
    if (DateTime.TryParse(CurrentTimeTextBox.Text, out DateTime currentTime))
    {
        // Check for medications that should have been taken before current time
        foreach (var medication in Medications.Where(m => m.Time.TimeOfDay <= currentTime.TimeOfDay && !m.IsTaken))
        {
            MessageBoxResult result = MessageBox.Show($"Did you take {medication.Name} scheduled at {medication.Time.ToString("HH:mm")}?", 
                "Medication Adherence", MessageBoxButton.YesNo);

            if (result == MessageBoxResult.Yes)
            {
                // Mark as taken with ✔
                medication.IsTaken = true;
            }
            else
            {
                // Mark as not taken with ❌
                medication.IsTaken = false;
            }
        }

        // Find the next medication due after the current time
        var nextMedication = Medications.Where(m => m.Time.TimeOfDay > currentTime.TimeOfDay).OrderBy(m => m.Time).FirstOrDefault();

        if (nextMedication != null)
        {
            NextMedicationTextBlock.Text = $"Next medication: {nextMedication.Name} at {nextMedication.Time.ToString("HH:mm")}";
        }
        else
        {
            NextMedicationTextBlock.Text = "No more medications due today.";
        }

        // Refresh the DataGrid to update the UI
        MedicationDataGrid.Items.Refresh();
    }
    else
    {
        MessageBox.Show("Please enter a valid time in HH:mm format.");
    }
}
