<Window x:Class="WpfUwpRestorer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Restore and Maximize App" Height="200" Width="400"
        WindowStartupLocation="CenterScreen">
  <Grid>
    <TextBlock Text="Enter Process ID:" 
               Margin="20,20,0,0" 
               HorizontalAlignment="Left" 
               VerticalAlignment="Top" />
    <TextBox x:Name="txtProcessId" 
             Width="200" 
             Height="25" 
             Margin="20,50,0,0" 
             HorizontalAlignment="Left" 
             VerticalAlignment="Top"/>
    <Button Content="Maximize" 
            Width="200" 
            Height="30" 
            Margin="20,90,0,0" 
            HorizontalAlignment="Left" 
            VerticalAlignment="Top" 
            Click="OnMaximizeClick"/>
  </Grid>
</Window>







using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows;

namespace WpfUwpRestorer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        // P/Invoke declarations for bringing a window to the front and maximizing it.
        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        
        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);
        
        const int SW_MAXIMIZE = 3; // standard flag for maximizing a window

        /// <summary>
        /// On button click, read the Process ID from the textbox and then either activate (for UWP)
        /// or maximize (for Win32) the corresponding app.
        /// </summary>
        private void OnMaximizeClick(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(txtProcessId.Text, out int processId))
            {
                try
                {
                    Process proc = Process.GetProcessById(processId);
                    if (proc == null)
                    {
                        MessageBox.Show("Process not found.");
                        return;
                    }
                    
                    // Determine if the target process is a UWP app.
                    // (For example, Calculatorâ€™s process name typically contains "Calculator".)
                    if (proc.ProcessName.ToLower().Contains("calculator"))
                    {
                        // Use the Windows COM IApplicationActivationManager to activate the UWP app.
                        IApplicationActivationManager aam = new ApplicationActivationManager();
                        uint newPid;
                        int hr = aam.ActivateApplication("Microsoft.WindowsCalculator_8wekyb3d8bbwe!App", null, ActivateOptions.None, out newPid);
                        if (hr < 0)
                        {
                            MessageBox.Show("Failed to activate Calculator. Error: " + hr);
                        }
                    }
                    else
                    {
                        // For Win32 apps, use the main window handle and ShowWindow.
                        IntPtr hWnd = proc.MainWindowHandle;
                        if (hWnd == IntPtr.Zero)
                        {
                            MessageBox.Show("No main window handle found for this process.");
                            return;
                        }
                        SetForegroundWindow(hWnd);
                        ShowWindow(hWnd, SW_MAXIMIZE);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
            else
            {
                MessageBox.Show("Invalid Process ID.");
            }
        }
    }

    #region COM Interfaces for IApplicationActivationManager

    // This COM interface allows you to activate (or bring to foreground) UWP apps.
    [ComImport]
    [Guid("2e941141-7f97-4756-ba1d-9decde894a3d")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    interface IApplicationActivationManager
    {
        // ActivateApplication brings a UWP app to the foreground.
        // If the app is already running, it activates it.
        int ActivateApplication([In] string appUserModelId, [In] string arguments, [In] ActivateOptions options, [Out] out uint processId);
    }

    // The COM class that implements IApplicationActivationManager.
    [ComImport]
    [Guid("45BA127D-10A8-46EA-8AB7-56EA9078943C")]
    [ClassInterface(ClassInterfaceType.None)]
    class ApplicationActivationManager : IApplicationActivationManager
    {
    }

    // Options for activation. Here we use None.
    [Flags]
    enum ActivateOptions
    {
        None = 0x00000000,
        DesignMode = 0x00000001,
        NoErrorUI = 0x00000002,
        NoSplashScreen = 0x00000004,
    }

    #endregion
}
