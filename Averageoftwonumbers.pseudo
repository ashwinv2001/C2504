<Window x:Class="Concord.Web.UI.Dialogs.UnUseRepositoryDeleteDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Concord.Web.UI.Dialogs"
        mc:Ignorable="d" WindowStartupLocation="CenterOwner"
        Title="Delete unused items" Height="500" Width="500"
        ResizeMode="NoResize" ShowInTaskbar="False" WindowStyle="ToolWindow"
        Activated="Window_Activated" ContentRendered="Window_ContentRendered">
    <Grid Background="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <StackPanel Orientation="Vertical" Grid.Row="0" Grid.ColumnSpan="2" Margin="10,10,10,5">
            <Label Name="Msg1" FontSize="12">These are unused repository items.</Label>
            <Label Name="Msg2" FontSize="12">Please check the item you want to delete and click the “Delete” button.</Label>
            <CheckBox Content="All" Margin="15,5,0,0" Checked="All_Checked" Unchecked="All_Unchecked" MinWidth="30"/>
        </StackPanel>

        <ListView Grid.Row="1" Grid.ColumnSpan="2" Name="UnusedStepList" Margin="10,0,10,5"
                  MinHeight="300" MinWidth="450" FontSize="12"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">
            <ListView.Resources>
                <Style x:Key="GridHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
                    <Setter Property="Visibility" Value="Collapsed" />
                </Style>

                <Style TargetType="ListViewItem">
                    <Style.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="IsSelected" Value="True"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>

                <!-- First Row Template (2 columns) -->
                <DataTemplate x:Key="FirstRowTemplate">
                    <StackPanel Orientation="Horizontal">
                        <CheckBox Margin="5,0" IsChecked="{Binding Selected, Mode=TwoWay}" />
                        <TextBlock Text="{Binding RepositoryDoctitle}" Margin="10,0,0,0"
                                   Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   VerticalAlignment="Center"/>
                    </StackPanel>
                </DataTemplate>

                <!-- Standard Template (3 columns) -->
                <DataTemplate x:Key="StandardRowTemplate">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <CheckBox Grid.Column="0" Margin="5,0"
                                  IsChecked="{Binding Selected, Mode=TwoWay}"
                                  Checked="CheckBox_Checked" Unchecked="CheckBox_Unchecked"/>
                        <TextBlock Grid.Column="1" Text="{Binding RepositoryName}" VerticalAlignment="Center"
                                   Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        <TextBlock Grid.Column="2" Text="{Binding RepositoryDoctitle}" VerticalAlignment="Center"
                                   Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                    </Grid>
                </DataTemplate>

                <!-- Template Selector -->
                <local:IndexBasedTemplateSelector x:Key="RepoTemplateSelector"
                                                  FirstItemTemplate="{StaticResource FirstRowTemplate}"
                                                  DefaultItemTemplate="{StaticResource StandardRowTemplate}" />
            </ListView.Resources>

            <ListView.ItemTemplateSelector>
                <StaticResource ResourceKey="RepoTemplateSelector"/>
            </ListView.ItemTemplateSelector>
        </ListView>

        <TextBlock Grid.Row="1" Grid.ColumnSpan="2" Name="TextNoItems" Text="{Binding Status}" Margin="20,10,0,0" FontSize="16"/>

        <ProgressBar x:Name="LoadProgressBar" Grid.Row="2" Grid.Column="0" Margin="15,5,0,10"
                     Height="30" Width="150" Minimum="0" Maximum="100" HorizontalAlignment="Left"/>

        <StackPanel Orientation="Horizontal" Grid.Row="2" Grid.Column="1" HorizontalAlignment="Right" Margin="10,12,10,10">
            <Button Name="DeleteBtn" Width="75" Height="23" Margin="0,0,10,0" Click="YesBtn_Click">Delete</Button>
            <Button Width="75" Height="23" Click="NoBtn_Click">Cancel</Button>
        </StackPanel>
    </Grid>
</Window>











using System.Windows;
using System.Windows.Controls;

namespace Concord.Web.UI.Dialogs
{
    public class IndexBasedTemplateSelector : DataTemplateSelector
    {
        public DataTemplate FirstItemTemplate { get; set; }
        public DataTemplate DefaultItemTemplate { get; set; }

        public override DataTemplate SelectTemplate(object item, DependencyObject container)
        {
            var element = container as FrameworkElement;
            if (element != null)
            {
                var listViewItem = ItemsControl.ItemsControlFromItemContainer(element);
                int index = listViewItem.ItemContainerGenerator.IndexFromContainer(container);
                return index == 0 ? FirstItemTemplate : DefaultItemTemplate;
            }

            return base.SelectTemplate(item, container);
        }
    }
}
