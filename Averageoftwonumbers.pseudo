using System;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;

namespace MdiAppProject
{
    public class Medication
    {
        public string Name { get; set; }
        public DateTime DoseTime { get; set; }
        public string DoseStatus { get; set; } // Ensure this is used consistently

        public ICommand MarkTakenCommand { get; }
        public ICommand MarkMissedCommand { get; }

        public Medication()
        {
            MarkTakenCommand = new RelayCommand1(MarkTaken);
            MarkMissedCommand = new RelayCommand1(MarkMissed);
        }

        private void MarkTaken(object parameter)
        {
            DoseStatus = "Taken";
        }

        private void MarkMissed(object parameter)
        {
            DoseStatus = "Missed";
        }
    }

    public partial class MedicationScheduleWindow : Window
    {
        public ObservableCollection<Medication> Medications { get; set; }

        public MedicationScheduleWindow()
        {
            InitializeComponent(); // Ensure this is called to initialize UI components

            Medications = new ObservableCollection<Medication>
            {
                new Medication { Name = "Medication A", DoseTime = DateTime.Now.AddHours(1), DoseStatus = "Upcoming" },
                new Medication { Name = "Medication B", DoseTime = DateTime.Now.AddHours(-1), DoseStatus = "Missed" },
                new Medication { Name = "Medication C", DoseTime = DateTime.Now, DoseStatus = "Taken" }
            };
        }
    }

    public class RelayCommand1 : ICommand
    {
        private readonly Action<object> _execute; // Ensure this matches your usage
        private readonly Func<bool> _canExecute;

        public RelayCommand1(Action<object> execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();
        public void Execute(object parameter) => _execute(parameter); // Ensure this can accept parameters

        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }
    }
}
