using System.ComponentModel;

public class CounterViewModel : INotifyPropertyChanged
{
    private int _count;
    
    public int Count
    {
        get => _count;
        set
        {
            _count = value;
            OnPropertyChanged("Count");
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    // Increment and Decrement commands
    public void Increment()
    {
        Count++;
    }

    public void Decrement()
    {
        Count--;
    }
}





<Window x:Class="CounterApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Counter" Height="200" Width="300">
    <Grid>
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
            <!-- Display the counter value -->
            <TextBlock Text="{Binding Count}" FontSize="36" HorizontalAlignment="Center" Margin="0,10" />

            <!-- Buttons for Increment and Decrement -->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,10">
                <Button Content="Increment" Width="100" Margin="5" Click="Increment_Click" />
                <Button Content="Decrement" Width="100" Margin="5" Click="Decrement_Click" />
            </StackPanel>
        </StackPanel>
    </Grid>
</Window>



using System.Windows;

namespace CounterApp
{
    public partial class MainWindow : Window
    {
        public CounterViewModel ViewModel { get; set; }

        public MainWindow()
        {
            InitializeComponent();

            ViewModel = new CounterViewModel();
            this.DataContext = ViewModel;
        }

        private void Increment_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.Increment();
        }

        private void Decrement_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.Decrement();
        }
    }
}








