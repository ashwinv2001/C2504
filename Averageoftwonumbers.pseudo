<Window x:Class="ImageConverterApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Image Converter" Height="400" Width="400">
    <Grid>
        <Button Content="Upload Image" HorizontalAlignment="Left" VerticalAlignment="Top" Width="120" Height="30" Click="UploadImage_Click" Margin="10,10,0,0"/>
        <Image Name="OriginalImage" HorizontalAlignment="Left" Height="150" Margin="10,50,0,0" VerticalAlignment="Top" Width="150"/>
        <Button Content="Convert to B&W" HorizontalAlignment="Left" VerticalAlignment="Top" Width="120" Height="30" Click="ConvertToBlackAndWhite_Click" Margin="10,210,0,0"/>
        <Image Name="BlackAndWhiteImage" HorizontalAlignment="Right" Height="150" Margin="0,50,10,0" VerticalAlignment="Top" Width="150"/>
        <Button Content="Download Image" HorizontalAlignment="Right" VerticalAlignment="Top" Width="120" Height="30" Click="DownloadImage_Click" Margin="0,210,10,0"/>
    </Grid>
</Window>





using Microsoft.Win32;
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Windows;
using System.Windows.Media.Imaging;

namespace ImageConverterApp
{
    public partial class MainWindow : Window
    {
        private Bitmap originalBitmap;
        private Bitmap blackAndWhiteBitmap;

        public MainWindow()
        {
            InitializeComponent();
        }

        // Upload Image Button Click
        private void UploadImage_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Image files (*.png;*.jpeg;*.jpg)|*.png;*.jpeg;*.jpg";
            if (openFileDialog.ShowDialog() == true)
            {
                originalBitmap = new Bitmap(openFileDialog.FileName);

                // Display the original image
                OriginalImage.Source = BitmapToImageSource(originalBitmap);
            }
        }

        // Convert to Black and White Button Click
        private void ConvertToBlackAndWhite_Click(object sender, RoutedEventArgs e)
        {
            if (originalBitmap == null)
            {
                MessageBox.Show("Please upload an image first.");
                return;
            }

            blackAndWhiteBitmap = ConvertToGrayscale(originalBitmap);

            // Display the black and white image
            BlackAndWhiteImage.Source = BitmapToImageSource(blackAndWhiteBitmap);
        }

        // Download Image Button Click
        private void DownloadImage_Click(object sender, RoutedEventArgs e)
        {
            if (blackAndWhiteBitmap == null)
            {
                MessageBox.Show("Please convert the image first.");
                return;
            }

            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "PNG Image|*.png";
            if (saveFileDialog.ShowDialog() == true)
            {
                blackAndWhiteBitmap.Save(saveFileDialog.FileName, ImageFormat.Png);
                MessageBox.Show("Image saved successfully.");
            }
        }

        // Convert the image to grayscale
        private Bitmap ConvertToGrayscale(Bitmap original)
        {
            Bitmap grayscaleBitmap = new Bitmap(original.Width, original.Height);

            for (int y = 0; y < original.Height; y++)
            {
                for (int x = 0; x < original.Width; x++)
                {
                    // Get the pixel color
                    System.Drawing.Color originalColor = original.GetPixel(x, y);

                    // Convert to grayscale
                    int grayScale = (int)((originalColor.R * 0.3) + (originalColor.G * 0.59) + (originalColor.B * 0.11));
                    System.Drawing.Color grayColor = System.Drawing.Color.FromArgb(originalColor.A, grayScale, grayScale, grayScale);

                    // Set the new color to the pixel
                    grayscaleBitmap.SetPixel(x, y, grayColor);
                }
            }

            return grayscaleBitmap;
        }

        // Convert a Bitmap to BitmapSource (for displaying in WPF Image control)
        private BitmapSource BitmapToImageSource(Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, ImageFormat.Png);
                memory.Position = 0;
                BitmapImage bitmapImage = new BitmapImage();
                bitmapImage.BeginInit();
                bitmapImage.StreamSource = memory;
                bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                bitmapImage.EndInit();
                return bitmapImage;
            }
        }
    }
}
