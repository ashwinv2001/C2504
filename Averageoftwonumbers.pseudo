<Window x:Class="MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Process Window Handle Finder" Height="200" Width="400">
    <Grid>
        <StackPanel Margin="20">
            <TextBlock Text="Enter Process ID:" FontSize="14"/>
            <TextBox Name="ProcessIdTextBox" Width="200" Margin="0,5"/>
            <Button Content="Get Window Handle" Width="200" Click="GetWindowHandle_Click"/>
            <TextBlock Text="Window Handle:" FontSize="14" Margin="0,10,0,0"/>
            <TextBox Name="WindowHandleTextBox" Width="200" IsReadOnly="True"/>
        </StackPanel>
    </Grid>
</Window>





using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows;

namespace ProcessWindowFinder
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        [DllImport("user32.dll")]
        private static extern bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);

        [DllImport("user32.dll")]
        private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint processId);

        private delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

        private void GetWindowHandle_Click(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(ProcessIdTextBox.Text, out int processId))
            {
                IntPtr mainWindowHandle = FindMainWindow(processId);
                if (mainWindowHandle != IntPtr.Zero)
                {
                    WindowHandleTextBox.Text = mainWindowHandle.ToString();
                }
                else
                {
                    WindowHandleTextBox.Text = "No main window found.";
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid Process ID.", "Invalid Input", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private IntPtr FindMainWindow(int processId)
        {
            IntPtr foundWindow = IntPtr.Zero;
            EnumWindows((hWnd, lParam) =>
            {
                GetWindowThreadProcessId(hWnd, out uint windowProcessId);
                if (windowProcessId == processId)
                {
                    foundWindow = hWnd;
                    return false; // Stop enumeration once found
                }
                return true; // Continue enumeration
            }, IntPtr.Zero);
            return foundWindow;
        }
    }
}
