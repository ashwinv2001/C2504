using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;


namespace MATProject.Pages
{
    public class Medication2
    {
        public string Name { get; set; }
        public string DoseStatus { get; set; } // To store the status of the medication
        public ICommand MarkTakenCommand { get; }
        public ICommand MarkMissedCommand { get; }

        public Medication2()
        {
            MarkTakenCommand = new RelayCommand2(MarkTaken);
            MarkMissedCommand = new RelayCommand2(MarkMissed);
        }

        private void MarkTaken(object parameter)
        {
            DoseStatus = "Taken"; // Update the status when marked as taken
        }

        private void MarkMissed(object parameter)
        {
            DoseStatus = "Missed"; // Update the status when marked as missed
        }
    }

    public class CheckInViewModel
    {
        public ObservableCollection<Medication2> Medications { get; set; }
        public string SideEffectsReport { get; set; }
        public ICommand ReportSideEffectsCommand { get; }

        public CheckInViewModel()
        {
            Medications = new ObservableCollection<Medication2>
            {
                new Medication2 { Name = "Medication A", DoseStatus = "Upcoming" },
                new Medication2 { Name = "Medication B", DoseStatus = "Missed" },
                new Medication2 { Name = "Medication C", DoseStatus = "Taken" }
            };

            ReportSideEffectsCommand = new RelayCommand2(ReportSideEffects);
        }

        private void ReportSideEffects(object parameter)
        {
            // Handle side effects reporting (e.g., save to a database or display a message)
            MessageBox.Show($"Reported side effects/issues: {SideEffectsReport}", "Side Effects Reported", MessageBoxButton.OK, MessageBoxImage.Information);
            SideEffectsReport = string.Empty; // Clear the report after submission
        }
    }

    public partial class CheckInWindow : Window
    {
        public CheckInWindow()
        {
            InitializeComponent();
           // DataContext = new CheckInViewModel(); // Set the DataContext to the ViewModel
        }

        //private void InitializeComponent()
        //{
        //    throw new NotImplementedException();
        //}
    }

    public class RelayCommand2 : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand2(Action<object> execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();
        public void Execute(object parameter) => _execute(parameter);
        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }
    }
}
