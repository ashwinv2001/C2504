<Window x:Class="ExeLauncher.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Exe Launcher" Height="250" Width="400">
    <Grid>
        <TextBox Name="ExePathTextBox" Margin="20,20,20,0" Height="30" VerticalAlignment="Top"/>
        <Button Name="BrowseButton" Content="Browse" Margin="20,60,200,0" Height="30" VerticalAlignment="Top" Click="BrowseButton_Click"/>
        <Button Name="RunExeButton" Content="Run Exe" Margin="200,60,20,0" Height="30" VerticalAlignment="Top" Click="RunExeButton_Click"/>
        <Label Name="StatusLabel" Margin="20,120,20,0" Height="50" VerticalAlignment="Top" HorizontalAlignment="Center" Content="Status: Ready" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" FontSize="14" />
    </Grid>
</Window>





using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Windows;

namespace ExeLauncher
{
    public partial class MainWindow : Window
    {
        private Process _exeProcess;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void BrowseButton_Click(object sender, RoutedEventArgs e)
        {
            // Open a file dialog to select an exe file
            Microsoft.Win32.OpenFileDialog openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Executable Files (*.exe)|*.exe",
                Title = "Select an Exe File"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                ExePathTextBox.Text = openFileDialog.FileName;
            }
        }

        private async void RunExeButton_Click(object sender, RoutedEventArgs e)
        {
            string exePath = ExePathTextBox.Text;

            if (string.IsNullOrWhiteSpace(exePath) || !File.Exists(exePath))
            {
                MessageBox.Show("Please select a valid .exe file path.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            try
            {
                if (IsUWPApp(exePath))
                {
                    string processName = Path.GetFileNameWithoutExtension(exePath); // Extract the process name
                    StatusLabel.Content = "Launching UWP app...";

                    // Start the UWP app
                    Process.Start("explorer.exe", exePath);

                    // Wait for 10 seconds
                    await Task.Delay(10000);

                    // Close the UWP app
                    CloseUWPAppByProcessName(processName);
                }
                else
                {
                    // Normal exe logic
                    _exeProcess = new Process
                    {
                        StartInfo = new ProcessStartInfo
                        {
                            FileName = exePath,
                            UseShellExecute = true
                        }
                    };

                    _exeProcess.Start();
                    StatusLabel.Content = "Process started. Waiting for 10 seconds...";

                    await Task.Delay(10000);

                    if (!_exeProcess.HasExited)
                    {
                        _exeProcess.Kill();
                        StatusLabel.Content = "Process closed successfully.";
                    }
                    else
                    {
                        StatusLabel.Content = "Process already exited.";
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private bool IsUWPApp(string exePath)
        {
            // Logic to determine if the app is a UWP app
            return exePath.Contains("WindowsApps");
        }

        private void CloseUWPAppByProcessName(string processName)
        {
            try
            {
                // PowerShell command to find and kill processes by name
                string command = $"Get-Process -Name {processName} -ErrorAction SilentlyContinue | Stop-Process -Force";

                ProcessStartInfo psi = new ProcessStartInfo
                {
                    FileName = "powershell.exe",
                    Arguments = $"-Command \"{command}\"",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (Process process = Process.Start(psi))
                {
                    process.WaitForExit();
                }

                StatusLabel.Content = $"{processName} process closed successfully.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to close UWP app: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}

