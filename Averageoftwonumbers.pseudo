using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Windows;

namespace ExeLauncher
{
    public partial class MainWindow : Window
    {
        private Process _exeProcess;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void BrowseButton_Click(object sender, RoutedEventArgs e)
        {
            // Open a file dialog to select an exe file
            Microsoft.Win32.OpenFileDialog openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Executable Files (*.exe)|*.exe",
                Title = "Select an Exe File"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                ExePathTextBox.Text = openFileDialog.FileName;
            }
        }

        private async void RunExeButton_Click(object sender, RoutedEventArgs e)
        {
            string exePath = ExePathTextBox.Text;

            if (string.IsNullOrWhiteSpace(exePath) || !File.Exists(exePath))
            {
                MessageBox.Show("Please select a valid .exe file path.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            try
            {
                if (IsUWPApp(exePath))
                {
                    // Start UWP App using AppUserModelID
                    string appUserModelId = GetAppUserModelID(exePath);
                    if (!string.IsNullOrEmpty(appUserModelId))
                    {
                        StatusLabel.Content = "Launching UWP app...";
                        StartUWPApp(appUserModelId);

                        // Wait for 10 seconds
                        await Task.Delay(10000);

                        // Close UWP App
                        CloseUWPApp(appUserModelId);
                        StatusLabel.Content = "UWP App closed successfully.";
                    }
                    else
                    {
                        StatusLabel.Content = "Unable to find AppUserModelID for this UWP app.";
                    }
                }
                else
                {
                    // Start a normal process
                    _exeProcess = new Process
                    {
                        StartInfo = new ProcessStartInfo
                        {
                            FileName = exePath,
                            UseShellExecute = true
                        }
                    };

                    _exeProcess.Start();
                    StatusLabel.Content = "Process started. Waiting for 10 seconds...";

                    // Wait for 10 seconds
                    await Task.Delay(10000);

                    // Close the process if it is still running
                    if (!_exeProcess.HasExited)
                    {
                        _exeProcess.Kill();
                        StatusLabel.Content = "Process closed successfully.";
                    }
                    else
                    {
                        StatusLabel.Content = "Process already exited.";
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private bool IsUWPApp(string exePath)
        {
            // Logic to determine if the app is a UWP app
            return exePath.Contains("WindowsApps");
        }

        private string GetAppUserModelID(string exePath)
        {
            // Custom logic to map exePath to AppUserModelID
            // You may use PowerShell commands or predefined mappings
            return "YourAppUserModelID"; // Replace with actual AppUserModelID
        }

        private void StartUWPApp(string appUserModelId)
        {
            Process.Start("explorer.exe", $"shell:appsFolder\\{appUserModelId}");
        }

        private void CloseUWPApp(string appUserModelId)
        {
            // Use PowerShell to terminate the UWP app
            string command = $"Get-Process | Where-Object {{$_.Path -like '*{appUserModelId}*'}} | Stop-Process";
            ExecutePowerShellCommand(command);
        }

        private void ExecutePowerShellCommand(string command)
        {
            ProcessStartInfo psi = new ProcessStartInfo
            {
                FileName = "powershell.exe",
                Arguments = $"-Command \"{command}\"",
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (Process process = Process.Start(psi))
            {
                process.WaitForExit();
            }
        }
    }
}
