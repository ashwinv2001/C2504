using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows;

namespace Wpftest3
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);

        private const int SW_RESTORE = 9; // Restore minimized window

        private void BringUWPToForeground(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(ProcessIdTextBox.Text, out int processId))
            {
                try
                {
                    Process process = Process.GetProcessById(processId);
                    IntPtr hwnd = GetMainWindowHandle(process);

                    if (hwnd != IntPtr.Zero)
                    {
                        ShowWindowAsync(hwnd, SW_RESTORE);
                        SetForegroundWindow(hwnd);
                        StatusText.Text = "App brought to foreground!";
                    }
                    else
                    {
                        // If hwnd is zero, try activating the UWP app
                        string appUserModelId = GetAppUserModelId(process);
                        if (!string.IsNullOrEmpty(appUserModelId))
                        {
                            ActivateUWPApp(appUserModelId);
                            StatusText.Text = "UWP App Activated!";
                        }
                        else
                        {
                            StatusText.Text = "Could not find AppUserModelId.";
                        }
                    }
                }
                catch (Exception ex)
                {
                    StatusText.Text = "Error: " + ex.Message;
                }
            }
            else
            {
                StatusText.Text = "Invalid Process ID.";
            }
        }

        private IntPtr GetMainWindowHandle(Process process)
        {
            process.Refresh(); // Refresh to update window handle
            return process.MainWindowHandle;
        }

        private string GetAppUserModelId(Process process)
        {
            try
            {
                using (var searcher = new System.Management.ManagementObjectSearcher(
                    $"SELECT * FROM Win32_Process WHERE ProcessId = {process.Id}"))
                {
                    foreach (var obj in searcher.Get())
                    {
                        if (obj["CommandLine"] != null)
                        {
                            string commandLine = obj["CommandLine"].ToString();
                            int startIndex = commandLine.IndexOf("-ServerName:") + 12;
                            int endIndex = commandLine.IndexOf(" ", startIndex);

                            if (startIndex > 12 && endIndex > startIndex)
                            {
                                return commandLine.Substring(startIndex, endIndex - startIndex);
                            }
                        }
                    }
                }
            }
            catch { }
            return null;
        }

        private void ActivateUWPApp(string appUserModelId)
        {
            IApplicationActivationManager appActivationManager =
                (IApplicationActivationManager)new ApplicationActivationManager();

            appActivationManager.ActivateApplication(appUserModelId, null, ACTIVATEOPTIONS.None, out _);
        }

        [ComImport, Guid("2e941141-7f97-4756-ba1d-9decde894a3d")]
        [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
        private interface IApplicationActivationManager
        {
            int ActivateApplication([MarshalAs(UnmanagedType.LPWStr)] string appUserModelId,
                                    [MarshalAs(UnmanagedType.LPWStr)] string arguments,
                                    ACTIVATEOPTIONS options, out uint processId);
        }

        private enum ACTIVATEOPTIONS
        {
            None = 0x00000000
        }

        [ComImport, Guid("45BA127D-10A8-46EA-8AB7-56EA9078943C")]
        private class ApplicationActivationManager { }
    }
}
