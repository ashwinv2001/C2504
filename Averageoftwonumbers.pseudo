using System.ComponentModel;

public class CounterViewModel : INotifyPropertyChanged
{
    private int _count;
    
    public int Count
    {
        get => _count;
        set
        {
            _count = value;
            OnPropertyChanged("Count");
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public void Increment()
    {
        Count++;
    }

    public void Decrement()
    {
        Count--;
    }
}







using System.Windows;

namespace CounterApp
{
    public partial class MainWindow : Window
    {
        public CounterViewModel ViewModel { get; set; }

        public MainWindow()
        {
            InitializeComponent();

            ViewModel = new CounterViewModel();
            this.DataContext = ViewModel;
        }

        private void Increment_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.Increment();
        }

        private void Decrement_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.Decrement();
        }
    }
}







