using System.Collections.ObjectModel;
using System.IO;
using System.Xml.Serialization;
using System.Windows.Input;
using Microsoft.Win32;

public class MainViewModel : INotifyPropertyChanged
{
    private string _filePath;
    private Repository _repository;
    private ControlInfo _selectedNode;
    private bool _isEditing;

    public string FilePath
    {
        get => _filePath;
        set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
    }

    public Repository RepositoryData
    {
        get => _repository;
        set { _repository = value; OnPropertyChanged(nameof(RepositoryData)); }
    }

    public ControlInfo SelectedNode
    {
        get => _selectedNode;
        set { _selectedNode = value; OnPropertyChanged(nameof(SelectedNode)); }
    }

    public bool IsEditing
    {
        get => _isEditing;
        set { _isEditing = value; OnPropertyChanged(nameof(IsEditing)); }
    }

    public ICommand BrowseCommand { get; }
    public ICommand RenameCommand { get; }
    public ICommand DeleteCommand { get; }
    public ICommand FinishRenameCommand { get; }

    public MainViewModel()
    {
        BrowseCommand = new RelayCommand(ExecuteBrowse);
        RenameCommand = new RelayCommand(ExecuteRename, CanEditOrDelete);
        DeleteCommand = new RelayCommand(ExecuteDelete, CanEditOrDelete);
        FinishRenameCommand = new RelayCommand(ExecuteFinishRename);
    }

    private void ExecuteBrowse(object obj)
    {
        OpenFileDialog openFileDialog = new OpenFileDialog
        {
            Filter = "XML files (*.xml)|*.xml",
            Title = "Select an XML file"
        };

        if (openFileDialog.ShowDialog() == true)
        {
            FilePath = openFileDialog.FileName;
            RepositoryData = LoadRepository(FilePath);
        }
    }

    private Repository LoadRepository(string xmlFilePath)
    {
        try
        {
            XmlSerializer serializer = new XmlSerializer(typeof(Repository));
            using (FileStream fileStream = new FileStream(xmlFilePath, FileMode.Open))
            {
                return (Repository)serializer.Deserialize(fileStream);
            }
        }
        catch
        {
            return null;
        }
    }

    private bool CanEditOrDelete(object obj) => SelectedNode != null;

    private void ExecuteRename(object obj)
    {
        IsEditing = true; // Enter edit mode, displaying a TextBox in the TreeView
    }

    private void ExecuteFinishRename(object obj)
    {
        IsEditing = false; // Exit edit mode
        SaveRepository(FilePath); // Save changes to XML
    }

    private void ExecuteDelete(object obj)
    {
        // Remove the selected node from its parent list and save to XML
        foreach (var title in RepositoryData.Titles)
        {
            if (title.ControlInfos.Contains(SelectedNode))
            {
                title.ControlInfos.Remove(SelectedNode);
                break;
            }
        }
        SaveRepository(FilePath);
        SelectedNode = null;
    }

    private void SaveRepository(string xmlFilePath)
    {
        XmlSerializer serializer = new XmlSerializer(typeof(Repository));
        using (FileStream fileStream = new FileStream(xmlFilePath, FileMode.Create))
        {
            serializer.Serialize(fileStream, RepositoryData);
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}






<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="XML Viewer" Height="450" Width="800">
    <Window.DataContext>
        <local:MainViewModel />
    </Window.DataContext>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- File Path TextBox and Browse Button -->
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <TextBox Width="400" Text="{Binding FilePath}" IsReadOnly="True" Margin="0,0,10,0"/>
            <Button Content="Browse" Command="{Binding BrowseCommand}" Width="100"/>
        </StackPanel>

        <!-- TreeView for displaying XML structure with Context Menu for Rename/Delete -->
        <TreeView Grid.Row="1" ItemsSource="{Binding RepositoryData.Titles}" SelectedItemChanged="TreeView_SelectedItemChanged">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding ControlInfos}">
                    <StackPanel>
                        <!-- Context Menu for TreeView Node -->
                        <StackPanel.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Rename" Command="{Binding DataContext.RenameCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
                                <MenuItem Header="Delete" Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
                            </ContextMenu>
                        </StackPanel.ContextMenu>

                        <!-- Editable TextBlock/TextBox for Rename -->
                        <ContentControl>
                            <ContentControl.Style>
                                <Style TargetType="ContentControl">
                                    <Setter Property="ContentTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding DisplayName}" />
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding DataContext.IsEditing, RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
                                            <Setter Property="ContentTemplate">
                                                <Setter.Value>
                                                    <DataTemplate>
                                                        <TextBox Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                                 LostFocus="{Binding DataContext.FinishRenameCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                                 KeyDown="TextBox_KeyDown" />
                                                    </DataTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>
                    </StackPanel>
                    <HierarchicalDataTemplate.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding DisplayName}" />
                        </DataTemplate>
                    </HierarchicalDataTemplate.ItemTemplate>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>






public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
    }

    private void TreeView_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
    {
        if (DataContext is MainViewModel viewModel)
            viewModel.SelectedNode = e.NewValue as ControlInfo;
    }

    private void TextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.Key == Key.Enter)
        {
            if (DataContext is MainViewModel viewModel)
                viewModel.ExecuteFinishRename(null);
        }
    }
}
