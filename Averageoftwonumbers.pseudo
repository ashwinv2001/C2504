using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows;

namespace Wpftest2
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);

        [DllImport("user32.dll")]
        private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint processId);

        private delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

        private async void OnResizeClick(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(txtProcessId.Text, out int processId))
            {
                try
                {
                    // Run the process search in a background thread
                    IntPtr hWnd = await Task.Run(() => FindWindowByProcessId(processId));

                    if (hWnd != IntPtr.Zero)
                    {
                        SetForegroundWindow(hWnd);
                        ShowWindow(hWnd, 3); // SW_MAXIMIZE
                    }
                    else
                    {
                        MessageBox.Show("Could not find a valid window for the given Process ID.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}", "Exception", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid Process ID.", "Invalid Input", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private IntPtr FindWindowByProcessId(int processId)
        {
            IntPtr foundWindow = IntPtr.Zero;

            // First, check if the process has a standard main window (Win32 apps)
            EnumWindows((hWnd, lParam) =>
            {
                GetWindowThreadProcessId(hWnd, out uint windowProcessId);
                if (windowProcessId == processId)
                {
                    foundWindow = hWnd;
                    return false; // Stop enumeration once found
                }
                return true; // Continue enumeration
            }, IntPtr.Zero);

            // If not found, check for UWP application
            if (foundWindow == IntPtr.Zero)
            {
                foundWindow = FindUwpWindow();
            }

            return foundWindow;
        }

        private IntPtr FindUwpWindow()
        {
            // Try to find UWP Calculator window (class name is "ApplicationFrameWindow")
            return FindWindow("ApplicationFrameWindow", null);
        }
    }
}
