<Window x:Class="WpfUwpRestorer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Restore and Maximize App" Height="200" Width="400"
        WindowStartupLocation="CenterScreen">
  <Grid>
    <TextBlock Text="Enter Process ID:" 
               Margin="20,20,0,0" 
               HorizontalAlignment="Left" 
               VerticalAlignment="Top" />
    <TextBox x:Name="txtProcessId" 
             Width="200" 
             Height="25" 
             Margin="20,50,0,0" 
             HorizontalAlignment="Left" 
             VerticalAlignment="Top"/>
    <Button Content="Maximize" 
            Width="200" 
            Height="30" 
            Margin="20,90,0,0" 
            HorizontalAlignment="Left" 
            VerticalAlignment="Top" 
            Click="OnMaximizeClick"/>
  </Grid>
</Window>





using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows;

namespace WpfUwpRestorer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        #region Win32 API Declarations

        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        
        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);
        
        const int SW_MAXIMIZE = 3;  // Flag to maximize a window

        #endregion

        /// <summary>
        /// Click handler for the "Maximize" button.
        /// If the process name contains "calculator" (case‑insensitive), assume it’s a UWP app and use COM activation;
        /// otherwise, for Win32 apps, bring the window to the front and maximize it.
        /// </summary>
        private void OnMaximizeClick(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(txtProcessId.Text, out int processId))
            {
                try
                {
                    Process proc = Process.GetProcessById(processId);
                    if (proc == null)
                    {
                        MessageBox.Show("Process not found.");
                        return;
                    }
                    
                    // Check if the process is Calculator (UWP). Adjust this check as needed.
                    if (proc.ProcessName.ToLower().Contains("calculator"))
                    {
                        // Use the COM activation manager for UWP apps.
                        // Note: We do not declare ApplicationActivationManager as implementing the interface.
                        // Instead, we import it and then cast it to IApplicationActivationManager.
                        IApplicationActivationManager aam =
                            (IApplicationActivationManager)new ApplicationActivationManager();
                        uint newPid;
                        int hr = aam.ActivateApplication("Microsoft.WindowsCalculator_8wekyb3d8bbwe!App",
                                                         null,
                                                         ActivateOptions.None,
                                                         out newPid);
                        if (hr < 0)
                        {
                            MessageBox.Show("Failed to activate Calculator. Error code: " + hr);
                        }
                    }
                    else
                    {
                        // For Win32 apps, use the main window handle.
                        IntPtr hWnd = proc.MainWindowHandle;
                        if (hWnd == IntPtr.Zero)
                        {
                            MessageBox.Show("No main window handle found for this process.");
                            return;
                        }
                        SetForegroundWindow(hWnd);
                        ShowWindow(hWnd, SW_MAXIMIZE);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
            else
            {
                MessageBox.Show("Invalid Process ID.");
            }
        }
    }

    #region COM Interface and Class for UWP Activation

    // Define the COM interface for activating UWP apps.
    [ComImport]
    [Guid("2e941141-7f97-4756-ba1d-9decde894a3d")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IApplicationActivationManager
    {
        // Activate an application for normal activation.
        int ActivateApplication(
            [In, MarshalAs(UnmanagedType.LPWStr)] string appUserModelId,
            [In, MarshalAs(UnmanagedType.LPWStr)] string arguments,
            [In] ActivateOptions options,
            [Out] out uint processId);

        // Activate an application for a file.
        int ActivateForFile(
            [In, MarshalAs(UnmanagedType.LPWStr)] string appUserModelId,
            [In] IntPtr shellItemArray,  // IShellItemArray pointer (not used here)
            [In, MarshalAs(UnmanagedType.LPWStr)] string verb,
            [Out] out uint processId);

        // Activate an application for a protocol.
        int ActivateForProtocol(
            [In, MarshalAs(UnmanagedType.LPWStr)] string appUserModelId,
            [In] IntPtr shellItemArray,  // IShellItemArray pointer (not used here)
            [Out] out uint processId);
    }

    // Import the COM class. Do NOT declare that it implements IApplicationActivationManager here.
    [ComImport]
    [Guid("45BA127D-10A8-46EA-8AB7-56EA9078943C")]
    [ClassInterface(ClassInterfaceType.None)]
    public class ApplicationActivationManager
    {
        // The COM runtime provides the implementation.
    }

    // Options for activation.
    [Flags]
    public enum ActivateOptions
    {
        None = 0x00000000,
        DesignMode = 0x00000001,
        NoErrorUI = 0x00000002,
        NoSplashScreen = 0x00000004,
    }

    #endregion
}

