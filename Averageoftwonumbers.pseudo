<Window x:Class="deserialization.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:deserialization"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Browse and TreeView -->
        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
            <TextBox Width="500" Text="{Binding FilePath}" IsReadOnly="True" />
            <Button Content="Browse" Width="100" Command="{Binding BrowseCommand}" />
        </StackPanel>

        <!-- TreeView with ContextMenu -->
        <TreeView Grid.Row="1" ItemsSource="{Binding XmlTree}" 
                  SelectedItemChanged="TreeView_SelectedItemChanged" 
                  Margin="10"
                  SelectedItem="{Binding SelectedNode}">
            <TreeView.Resources>
                <Style TargetType="TreeViewItem">
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu Opened="ContextMenu_Opened">
                                <!-- Using PlacementTarget to bind commands correctly -->
                                <MenuItem Header="Rename" Command="{Binding PlacementTarget.DataContext.RenameCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                          IsEnabled="{Binding PlacementTarget.DataContext.CanRenameDelete, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
                                <MenuItem Header="Delete" Command="{Binding PlacementTarget.DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                          IsEnabled="{Binding PlacementTarget.DataContext.CanRenameDelete, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TreeView.Resources>

            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <TextBlock Text="{Binding Name}"/>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>

        <!-- Rename and Delete Buttons -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="10">
            <Button Content="Rename" Width="100" Command="{Binding RenameCommand}" IsEnabled="{Binding CanRenameDelete}" />
            <Button Content="Delete" Width="100" Command="{Binding DeleteCommand}" IsEnabled="{Binding CanRenameDelete}" />
        </StackPanel>
    </Grid>
</Window>





using System.Windows;
using System.Windows.Controls;

namespace deserialization
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        // Ensure the selected node is updated when the context menu is opened
        private void ContextMenu_Opened(object sender, RoutedEventArgs e)
        {
            var contextMenu = sender as ContextMenu;
            if (contextMenu != null)
            {
                var treeViewItem = contextMenu.PlacementTarget as TreeViewItem;
                if (treeViewItem != null)
                {
                    treeViewItem.IsSelected = true;
                }
            }
        }

        private void TreeView_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            if (DataContext is MainWindowViewModel viewModel)
            {
                viewModel.SelectedNode = e.NewValue as XmlNodeViewModel;
            }
        }
    }
}

