 private void NotificationParameter(List<object> param, EventType type)
        {
            ((IApp)Application.Current).InnerEventLogOut(InnerEventActionType.ReceiveRequest, type, "[Debug for EventRequest][PhotoMenu.Frame.NotificationParameterDisplay()]", param);

            // 切断中は通知された値を処理しない
            if (myStatusInfo.ExpSequence.IsDisconnect())
            {
                ((IApp)Application.Current).InnerEventLogOut(InnerEventActionType.ReceiveRequest, type, "[Debug for EventRequest][PhotoMenu.Frame.NotificationParameterDisplay()] Cutting.", null);
                return;
            }

            if (null == param || param.Count < 2)
            {
                // パラメータが無い、または2個未満の場合は何もしない
                ((IApp)Application.Current).InnerEventLogOut(InnerEventActionType.ReceiveRequest, type, "[Debug for EventRequest][PhotoMenu.Frame.NotificationParameterDisplay()] Lack of parameters.", null);
                return;
            }

            bool settingResult = false;             //設定結果
            bool.TryParse(param[1].ToString(), out settingResult);

            if (settingResult)
            {
                // SetAcqMode送信
                //if( RxRadApcManage.GetApcTechnique() != (int)TechniqueTypes.FPD_Table) //(1.4.4.3) del
                if (RxRadApcManage.GetApcTechnique() != (int)Technique.RAD) //(1.4.4.3) add
                {
                    // FPD以外は送信しない
                    return;
                }
                SendSetAcqMode(null, EventType.Unknown);
            }
            else
            {
                //(1.3.8.3)---> del
                //if (((IApp)Application.Current).IsFirstSendSetParameterAfterStartExam)
                //{
                //    ((IApp)Application.Current).LogOut(412364);
                //}
                //else
                //{
                //(1.3.8.3)---< del
                // ダイアログ表示中は撮影禁止(LockType.ConditionChangeに連動して撮影禁止が掛かっている為、タイマー停止の間、撮影禁止する)
                ExpPermissionManage.StartProhibition(ExpPermissionManage.Reason.SetParameterReTryDialog);
                //(1.4.1.3)---> add
                // ダイアログ表示中はコマンドが破棄されタイムアウトする為、スイッチシーケンス関連のタイマーを停止する
                //(1.4.4.5)---> del コマンドを破棄しないように変更した為、削除
                //if (ScreenLockManage.isTimerActive(LockType.Acquisition))
                //{
                //    ScreenLockManage.StopTimer(LockType.Acquisition);
                //}
                //if (ScreenLockManage.isTimerActive(LockType.AcquisitionReady))
                //{
                //    ScreenLockManage.StopTimer(LockType.AcquisitionReady);
                //}
                //(1.4.4.5)---< del
                //(1.4.1.3)---< add
                // ダイアログ表示中はタイムアウト防止の為、画面ロック（タイマー）は一時停止
                ScreenLockManage.StopTimer(LockType.ConditionChange);

                // 再送確認ダイアログ
                ((IApp)Application.Current).IsSetParameterReTryDialogDisplay = true;
                bool retry = ShowMessage(412365, LEVEL.Infomation, BUTTONTYPE.Button3, true);
                ((IApp)Application.Current).IsSetParameterReTryDialogDisplay = false;

                // 画面ロック（タイマー）再開（受信スレッドの最後のアンロックまでロックする）
                ScreenLockManage.StartTimer(LockType.ConditionChange);
                // ダイアログ表示中（画面ロック（タイマー）は停止中）の撮影禁止を解除
                ExpPermissionManage.EndProhibition(ExpPermissionManage.Reason.SetParameterReTryDialog);

                if (!retry)
                {
                    //(1.4.5.8)---> add
                    // 撮影禁止状態から再度選択して撮影出来るようにAPCを未選択状態にする
                    // EventRequestにより閉じた場合、未選択にしない
                    if (CommonParts.IsMessageBoxCloseEventRequested == false) //(1.4.7.0) add
                    {
                        AutoSelectOff(param, type);
                    }
                    RxRadApcManage.ClearSelectedApcWithoutBodyType();
                    // ライブモニタのカレントテクニックを空にする
                    SendRxRadChangedProtocolTechInfo();
                    //(1.4.5.8)---< add

                    return;
                }
                //}

                // SetParameter再送
                SendRxRadSetParameter(null, EventType.Unknown);
            }

            //((IApp)Application.Current).IsFirstSendSetParameterAfterStartExam = false; //(1.3.8.3) del
        }
