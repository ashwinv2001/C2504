<Window x:Class="MedicationAdherenceTracker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Medication Adherence Tracker" Height="450" Width="800">
    <Grid>
        <StackPanel>
            <DataGrid ItemsSource="{Binding Medications}" AutoGenerateColumns="False" CanUserAddRows="False" Name="MedicationDataGrid">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Medicine Name" Binding="{Binding Name}" Width="*"/>
                    <DataGridTextColumn Header="Time (24-hour)" Binding="{Binding Time, StringFormat={}{0:HH:mm}}" Width="*"/>
                    <DataGridCheckBoxColumn Header="Taken" Binding="{Binding IsTaken}" Width="Auto"/>
                </DataGrid.Columns>
            </DataGrid>

            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10">
                <Button Content="Add Medication" Click="AddMedication_Click" Margin="5"/>
                <Button Content="Delete Medication" Click="DeleteMedication_Click" Margin="5"/>
                <Button Content="Edit Medication" Click="EditMedication_Click" Margin="5"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10">
                <TextBlock Text="Enter current time (HH:mm): " VerticalAlignment="Center"/>
                <TextBox Name="CurrentTimeTextBox" Width="100" Margin="5"/>
                <Button Content="Check Adherence" Click="CheckAdherence_Click" Margin="5"/>
            </StackPanel>

            <TextBlock Name="NextMedicationTextBlock" Margin="10" FontWeight="Bold"/>
        </StackPanel>
    </Grid>
</Window>








using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;

namespace MedicationAdherenceTracker
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<Medication> Medications { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            Medications = new ObservableCollection<Medication>
            {
                new Medication { Name = "Paracetamol", Time = new DateTime(1, 1, 1, 8, 0, 0), IsTaken = false },
                new Medication { Name = "Dolo", Time = new DateTime(1, 1, 1, 12, 0, 0), IsTaken = false },
                new Medication { Name = "Citrusin", Time = new DateTime(1, 1, 1, 16, 0, 0), IsTaken = false }
            };
            this.DataContext = this;
        }

        private void AddMedication_Click(object sender, RoutedEventArgs e)
        {
            Medications.Add(new Medication { Name = "New Medication", Time = DateTime.Now, IsTaken = false });
        }

        private void DeleteMedication_Click(object sender, RoutedEventArgs e)
        {
            if (MedicationDataGrid.SelectedItem != null)
            {
                Medications.Remove((Medication)MedicationDataGrid.SelectedItem);
            }
        }

        private void EditMedication_Click(object sender, RoutedEventArgs e)
        {
            if (MedicationDataGrid.SelectedItem != null)
            {
                // Simple editing in the DataGrid for demonstration purposes.
                // In production, you could open a separate window/dialog for editing.
            }
        }

        private void CheckAdherence_Click(object sender, RoutedEventArgs e)
        {
            if (DateTime.TryParse(CurrentTimeTextBox.Text, out DateTime currentTime))
            {
                // Check for medications that should have been taken before current time
                foreach (var medication in Medications.Where(m => m.Time.TimeOfDay <= currentTime.TimeOfDay && !m.IsTaken))
                {
                    MessageBox.Show($"Did you take {medication.Name} scheduled at {medication.Time.ToString("HH:mm")}?");

                    // Set the medication as taken
                    medication.IsTaken = true;
                }

                // Find









            if (nextMedication != null)
            {
                NextMedicationTextBlock.Text = $"Next medication: {nextMedication.Name} at {nextMedication.Time.ToString("HH:mm")}";
            }
            else
            {
                NextMedicationTextBlock.Text = "No more medications due today.";
            }

            // Refresh the DataGrid
            MedicationDataGrid.Items.Refresh();
        }
        else
        {
            MessageBox.Show("Please enter a valid time in HH:mm format.");
        }
    }
}

public class Medication : INotifyPropertyChanged
{
    private string _name;
    private DateTime _time;
    private bool _isTaken;

    public string Name
    {
        get => _name;
        set
        {
            _name = value;
            OnPropertyChanged("Name");
        }
    }

    public DateTime Time
    {
        get => _time;
        set
        {
            _time = value;
            OnPropertyChanged("Time");
        }
    }

    public bool IsTaken
    {
        get => _isTaken;
        set
        {
            _isTaken = value;
            OnPropertyChanged("IsTaken");
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}









