using System.Windows;
using MATProject.ViewModels;

namespace MATProject.Pages
{
    public partial class PatientProfileWindow : Window
    {
        public PatientProfileWindow()
        {
            InitializeComponent();
            DataContext = new PatientProfileViewModel(); // Set DataContext to ViewModel
        }
    }
}









using System;
using System.Windows;
using System.Windows.Input;

namespace MATProject.Pages
{
    public class PatientProfileViewModel
    {
        private readonly PatientProfileRepository _repository;

        public string Name { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public string MedicalConditions { get; set; }
        public string Allergies { get; set; }
        public string EmergencyContacts { get; set; }
        public ICommand SaveCommand { get; }

        public PatientProfileViewModel()
        {
            _repository = new PatientProfileRepository();
            SaveCommand = new RelayCommand2(SaveProfile);
        }

        private void SaveProfile(object parameter)
        {
            try
            {
                if (string.IsNullOrEmpty(Name) || !DateOfBirth.HasValue)
                {
                    MessageBox.Show("Please enter the required fields.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                _repository.SavePatientProfile(Name, DateOfBirth.Value, MedicalConditions, Allergies, EmergencyContacts);
                MessageBox.Show("Profile saved successfully!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                ClearFields();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error saving profile: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ClearFields()
        {
            Name = string.Empty;
            DateOfBirth = null;
            MedicalConditions = string.Empty;
            Allergies = string.Empty;
            EmergencyContacts = string.Empty;
        }
    }
}












using System;
using System.Data.SqlClient;

namespace MATProject.Pages
{
    public class PatientProfileRepository
    {
        private readonly string connectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=MedicationSchedule;Integrated Security=True;";

        public void SavePatientProfile(string name, DateTime dateOfBirth, string medicalConditions, string allergies, string emergencyContacts)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                string query = "INSERT INTO PatientProfiles (Name, DateOfBirth, MedicalConditions, Allergies, EmergencyContacts) VALUES (@Name, @DateOfBirth, @MedicalConditions, @Allergies, @EmergencyContacts)";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Name", name);
                    command.Parameters.AddWithValue("@DateOfBirth", dateOfBirth);
                    command.Parameters.AddWithValue("@MedicalConditions", medicalConditions);
                    command.Parameters.AddWithValue("@Allergies", allergies);
                    command.Parameters.AddWithValue("@EmergencyContacts", emergencyContacts);
                    command.ExecuteNonQuery();
                }
            }
        }
    }
}







<Window x:Class="MATProject.Pages.PatientProfileWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MATProject.Pages"
        mc:Ignorable="d"
        Title="PatientProfileWindow" Height="450" Width="800">
    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>

        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <TextBlock TextAlignment ="Center" TextWrapping="Wrap" Text="PATIENT PROFILE " 
                   Width="799" Height="62" FontSize="36" FontWeight="Bold" 
                   Background="Wheat" FontFamily="Georgia" Grid.Row="0" Grid.ColumnSpan="2" VerticalAlignment="Center" IsEnabled="False"/>
        
        
         
        
        
        
        
        
        
        
        <TextBlock x:Name="lblName" TextWrapping="Wrap" Text="Name" 
                   FontSize="18" Foreground="Black" 
                   Grid.Row="1" Grid.Column="0" Margin="5" VerticalAlignment="Center" FontWeight="Bold" HorizontalAlignment="Center"/>
        <TextBox x:Name="txtName" TextWrapping="Wrap" 
                 Width="300" FontSize="18" Background="#FFDACACA" 
                 Grid.Row="1" Grid.Column="1"  VerticalAlignment="Center" Height="28" HorizontalAlignment="Left" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"/>

        <TextBlock x:Name="lblDateofBirth" TextWrapping="Wrap" 
                   Text="Date of Birth" FontSize="18" 
                   Foreground="Black" Grid.Row="2" Grid.Column="0" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
        <DatePicker  x:Name="dpDateOfBirth" Grid.Row="2" Grid.Column="1" Margin="5" 
                     Width="300" Height="28" VerticalAlignment="Center" HorizontalAlignment="Left"
                   SelectedDate="{Binding DateOfBirth, UpdateSourceTrigger=PropertyChanged}"   />

        <TextBlock x:Name="lblMedicalConditions" TextWrapping="Wrap" 
                   Text="Medical Conditions" FontSize="18" HorizontalAlignment="Center" 
                   Foreground="Black" Grid.Row="3" Grid.Column="0" Margin="5" VerticalAlignment="Center" FontWeight="Bold"/>
        <TextBox x:Name="txtMedicalConditions" TextWrapping="Wrap" 
                 Width="300" FontSize="18" Background="#FFDACACA" 
                 Grid.Row="3" Grid.Column="1" Margin="5" Height="28" VerticalAlignment="Center" HorizontalAlignment="Left"
                 Text="{Binding MedicalConditions, UpdateSourceTrigger=PropertyChanged}"/>

        <TextBlock x:Name="lblAllergies" TextWrapping="Wrap" 
                   Text="Allergies" FontSize="18" HorizontalAlignment="Center" 
                   Foreground="Black" Grid.Row="4" Grid.Column="0" Margin="5" VerticalAlignment="Center" FontWeight="Bold"/>
        <TextBox x:Name="txtAllergies" TextWrapping="Wrap" 
                 Width="300" FontSize="18" Background="#FFDACACA" 
                 Grid.Row="4" Grid.Column="1" Margin="5" Height="28" VerticalAlignment="Center" HorizontalAlignment="Left"
                Text="{Binding Allergies, UpdateSourceTrigger=PropertyChanged}" />

        <TextBlock x:Name="lblEmergencyContacts" TextWrapping="Wrap" 
                   Text="Emergency Contacts" FontSize="18" HorizontalAlignment="Center" 
                   Foreground="Black" Grid.Row="5" Grid.Column="0" Margin="5" VerticalAlignment="Center" FontWeight="Bold"/>
        <TextBox x:Name="txtEmergencyContacts" TextWrapping="Wrap" 
                 Width="300" FontSize="18" Background="#FFDACACA" 
                 Grid.Row="5" Grid.Column="1" Margin="5" Height="28" VerticalAlignment="Center" HorizontalAlignment="Left"
                Text="{Binding EmergencyContacts, UpdateSourceTrigger=PropertyChanged}" />

        <Button x:Name="btnSave" Content="Save Profile" 
                HorizontalAlignment="Left" VerticalAlignment="Center" 
                Width="145" Height="34" FontWeight="Bold" FontSize="18" 
                BorderBrush="Brown" Background="CadetBlue" Foreground="White"
                Grid.Row="6" Grid.Column="1" Margin="5,0,0,0"
               Command="{Binding SaveCommand}" />

        <Border  
                 VerticalAlignment="Top">
            <Border.Background>
                <ImageBrush Stretch="Fill"/>
            </Border.Background>
        </Border>
    </Grid>

</Window>







using System;
using System.Collections.Generic;
using System.Linq;

namespace MATProject.Data
{
    public class PatientProfileRepo
    {
        private readonly AppDbContext _context;

        public PatientProfileRepo(AppDbContext context)
        {
            _context = context;
        }

        // Method to add a new patient profile
        public void AddPatientProfile(PatientProfile profile)
        {
            _context.PatientProfiles.Add(profile);
            _context.SaveChanges();
        }

        // Method to retrieve all patient profiles
        public List<PatientProfile> GetAllPatientProfiles()
        {
            return _context.PatientProfiles.ToList();
        }

        // Method to retrieve a patient profile by ID
        public PatientProfile GetPatientProfileById(int id)
        {
            return _context.PatientProfiles.FirstOrDefault(p => p.Id == id);
        }

        // Method to update an existing patient profile
        public void UpdatePatientProfile(PatientProfile profile)
        {
            var existingProfile = _context.PatientProfiles.Find(profile.Id);
            if (existingProfile != null)
            {
                existingProfile.Name = profile.Name;
                existingProfile.DateOfBirth = profile.DateOfBirth;
                existingProfile.MedicalConditions = profile.MedicalConditions;
                existingProfile.Allergies = profile.Allergies;
                existingProfile.EmergencyContacts = profile.EmergencyContacts;

                _context.SaveChanges();
            }
        }

        // Method to delete a patient profile
        public void DeletePatientProfile(int id)
        {
            var profile = _context.PatientProfiles.Find(id);
            if (profile != null)
            {
                _context.PatientProfiles.Remove(profile);
                _context.SaveChanges();
            }
        }
    }
}
