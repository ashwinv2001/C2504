using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows;

private void KillProcessByName(string processName, string exePath)
{
    try
    {
        string windowsAppsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "WindowsApps");

        // Check if the process belongs to a UWP app
        if (exePath.StartsWith(windowsAppsPath, StringComparison.OrdinalIgnoreCase))
        {
            Process[] uwpProcesses = Process.GetProcessesByName("ApplicationFrameHost");
            foreach (var process in uwpProcesses)
            {
                try
                {
                    // Get the associated UWP process
                    var childProcesses = Process.GetProcesses()
                        .Where(p => p.MainWindowHandle != IntPtr.Zero)  // Ensure process has a UI window
                        .Where(p => p.MainWindowTitle.Contains(processName, StringComparison.OrdinalIgnoreCase));

                    foreach (var uwpProcess in childProcesses)
                    {
                        if (!string.IsNullOrEmpty(uwpProcess.MainModule?.FileName) &&
                            uwpProcess.MainModule.FileName.Equals(exePath, StringComparison.OrdinalIgnoreCase))
                        {
                            uwpProcess.Kill();
                            Debug.WriteLine($"Killed UWP Process: {uwpProcess.ProcessName}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error checking/killing UWP process: {ex.Message}");
                }
            }
        }
        else
        {
            MessageBox.Show("NOT a UWP APP", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
