<Window x:Class="MdiAppProject.CheckInWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:MdiAppProject"
        Title="Check-in Page" Height="400" Width="600">

    <Grid Margin="20">
        <ListView ItemsSource="{Binding Medications}" Margin="0,0,0,100">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Medication Name" DisplayMemberBinding="{Binding Name}" Width="200"/>
                    <GridViewColumn Header="Status" DisplayMemberBinding="{Binding DoseStatus}" Width="100"/>
                    <GridViewColumn Header="Actions" Width="200">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Button Content="Mark as Taken" Command="{Binding MarkTakenCommand}" CommandParameter="{Binding}" Margin="5"/>
                                    <Button Content="Mark as Missed" Command="{Binding MarkMissedCommand}" CommandParameter="{Binding}" Margin="5"/>
                                </StackPanel>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                </GridView>
            </ListView.View>
        </ListView>

        <TextBox Width="400" Height="100" 
                 VerticalAlignment="Bottom" 
                 Text="{Binding SideEffectsReport, UpdateSourceTrigger=PropertyChanged}" 
                 Margin="0,0,0,10"/>

        <Button Content="Report Side Effects" Command="{Binding ReportSideEffectsCommand}" 
                Width="150" Height="30" 
                VerticalAlignment="Bottom" Margin="410,0,0,10"/>
    </Grid>
</Window>



using System;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;

namespace MdiAppProject
{
    public class Medication
    {
        public string Name { get; set; }
        public string DoseStatus { get; set; } // To store the status of the medication
        public ICommand MarkTakenCommand { get; }
        public ICommand MarkMissedCommand { get; }

        public Medication()
        {
            MarkTakenCommand = new RelayCommand(MarkTaken);
            MarkMissedCommand = new RelayCommand(MarkMissed);
        }

        private void MarkTaken(object parameter)
        {
            DoseStatus = "Taken"; // Update the status when marked as taken
        }

        private void MarkMissed(object parameter)
        {
            DoseStatus = "Missed"; // Update the status when marked as missed
        }
    }

    public class CheckInViewModel
    {
        public ObservableCollection<Medication> Medications { get; set; }
        public string SideEffectsReport { get; set; }
        public ICommand ReportSideEffectsCommand { get; }

        public CheckInViewModel()
        {
            Medications = new ObservableCollection<Medication>
            {
                new Medication { Name = "Medication A", DoseStatus = "Upcoming" },
                new Medication { Name = "Medication B", DoseStatus = "Missed" },
                new Medication { Name = "Medication C", DoseStatus = "Taken" }
            };

            ReportSideEffectsCommand = new RelayCommand(ReportSideEffects);
        }

        private void ReportSideEffects(object parameter)
        {
            // Handle side effects reporting (e.g., save to a database or display a message)
            MessageBox.Show($"Reported side effects/issues: {SideEffectsReport}", "Side Effects Reported", MessageBoxButton.OK, MessageBoxImage.Information);
            SideEffectsReport = string.Empty; // Clear the report after submission
        }
    }

    public partial class CheckInWindow : Window
    {
        public CheckInWindow()
        {
            InitializeComponent();
            DataContext = new CheckInViewModel(); // Set the DataContext to the ViewModel
        }
    }

    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action<object> execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();
        public void Execute(object parameter) => _execute(parameter);
        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }
    }
}
