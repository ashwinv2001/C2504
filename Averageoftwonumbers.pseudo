using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Automation; // Add UIAutomation for UWP handling

namespace Wpftest2
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);

        [DllImport("user32.dll")]
        private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint processId);

        private delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

        private async void OnResizeClick(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(txtProcessId.Text, out int processId))
            {
                try
                {
                    // Run in background thread to prevent UI freezing
                    IntPtr hWnd = await Task.Run(() => FindWindowByProcessId(processId));

                    if (hWnd != IntPtr.Zero)
                    {
                        SetForegroundWindow(hWnd);
                        ShowWindow(hWnd, 3); // SW_MAXIMIZE
                    }
                    else
                    {
                        MessageBox.Show("Could not find a valid window for the given Process ID.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}", "Exception", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid Process ID.", "Invalid Input", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private IntPtr FindWindowByProcessId(int processId)
        {
            IntPtr foundWindow = IntPtr.Zero;

            // Try to find a regular Win32 window
            EnumWindows((hWnd, lParam) =>
            {
                GetWindowThreadProcessId(hWnd, out uint windowProcessId);
                if (windowProcessId == processId)
                {
                    foundWindow = hWnd;
                    return false; // Stop enumeration
                }
                return true;
            }, IntPtr.Zero);

            // If not found, check for UWP app
            if (foundWindow == IntPtr.Zero)
            {
                foundWindow = FindUwpWindow(processId);
            }

            return foundWindow;
        }

        private IntPtr FindUwpWindow(int processId)
        {
            // Get ApplicationFrameHost process (UWP apps use this)
            var frameHost = Process.GetProcessesByName("ApplicationFrameHost").FirstOrDefault();
            if (frameHost == null) return IntPtr.Zero;

            IntPtr foundWindow = IntPtr.Zero;

            // Find the top-level UWP window
            EnumWindows((hWnd, lParam) =>
            {
                GetWindowThreadProcessId(hWnd, out uint windowProcessId);
                if (windowProcessId == frameHost.Id)
                {
                    // Use UIAutomation to get the real UWP window inside ApplicationFrameHost
                    AutomationElement element = AutomationElement.FromHandle(hWnd);
                    if (element != null && element.Current.ProcessId == processId)
                    {
                        foundWindow = hWnd;
                        return false;
                    }
                }
                return true;
            }, IntPtr.Zero);

            return foundWindow;
        }
    }
}
