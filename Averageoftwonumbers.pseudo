<Window x:Class="XmlTreeApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="XML Tree Viewer" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        
        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
            <TextBox Width="500" Text="{Binding FilePath}" IsReadOnly="True" />
            <Button Content="Browse" Width="100" Command="{Binding BrowseCommand}" />
        </StackPanel>
        
        <TreeView Grid.Row="1" ItemsSource="{Binding XmlTree}" Margin="10">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <TextBlock Text="{Binding Name}" />
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>






using Microsoft.Win32;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows.Input;
using System.Xml.Linq;

namespace XmlTreeApp
{
    public class MainWindowViewModel : BaseViewModel
    {
        public string FilePath { get; set; }
        public ObservableCollection<XmlNodeViewModel> XmlTree { get; set; } = new ObservableCollection<XmlNodeViewModel>();

        public ICommand BrowseCommand { get; }

        public MainWindowViewModel()
        {
            BrowseCommand = new RelayCommand(OpenFileDialog);
        }

        private void OpenFileDialog()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "XML files (*.xml)|*.xml"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                FilePath = openFileDialog.FileName;
                OnPropertyChanged(nameof(FilePath));
                LoadXmlTree(FilePath);
            }
        }

        private void LoadXmlTree(string filePath)
        {
            XmlTree.Clear();

            if (File.Exists(filePath))
            {
                XDocument xmlDocument = XDocument.Load(filePath);
                XmlTree.Add(new XmlNodeViewModel(xmlDocument.Root));
                OnPropertyChanged(nameof(XmlTree));
            }
        }
    }
}







using System.Collections.ObjectModel;
using System.Xml.Linq;

namespace XmlTreeApp
{
    public class XmlNodeViewModel
    {
        public string Name { get; set; }
        public ObservableCollection<XmlNodeViewModel> Children { get; set; }

        public XmlNodeViewModel(XElement element)
        {
            Name = element.Name.LocalName;
            Children = new ObservableCollection<XmlNodeViewModel>();

            foreach (var child in element.Elements())
            {
                Children.Add(new XmlNodeViewModel(child));
            }
        }
    }
}






using System;
using System.Windows.Input;

namespace XmlTreeApp
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public event EventHandler CanExecuteChanged;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();
        public void Execute(object parameter) => _execute();

        public void RaiseCanExecuteChanged()
        {
            CanExecuteChanged?.Invoke(this, EventArgs.Empty);
        }
    }
}






using System.ComponentModel;

namespace XmlTreeApp
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}







using System.Windows;

namespace XmlTreeApp
{
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            MainWindow window = new MainWindow
            {
                DataContext = new MainWindowViewModel()
            };
            window.Show();
        }
    }
}







