<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="XML Tree Viewer" Height="450" Width="800">
    <Grid>
        <TextBox x:Name="FilePathTextBox" Width="400" Margin="10"/>
        <Button Content="Browse" Width="100" Margin="10" Click="BrowseButton_Click"/>
        <TreeView x:Name="XmlTreeView" Margin="10,50,10,10" ContextMenuOpening="XmlTreeView_ContextMenuOpening">
            <TreeView.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Rename" Click="RenameMenuItem_Click"/>
                    <MenuItem Header="Delete" Click="DeleteMenuItem_Click"/>
                </ContextMenu>
            </TreeView.ContextMenu>
        </TreeView>
    </Grid>
</Window>




using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Xml.Linq;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private ObservableCollection<XmlNodeViewModel> _xmlNodes;
        private XmlNodeViewModel _selectedNode;

        public MainWindow()
        {
            InitializeComponent();
            _xmlNodes = new ObservableCollection<XmlNodeViewModel>();
            XmlTreeView.ItemsSource = _xmlNodes;
        }

        private void BrowseButton_Click(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.OpenFileDialog openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "XML Files (*.xml)|*.xml"
            };
            if (openFileDialog.ShowDialog() == true)
            {
                FilePathTextBox.Text = openFileDialog.FileName;
                LoadXml(openFileDialog.FileName);
            }
        }

        private void LoadXml(string filePath)
        {
            _xmlNodes.Clear();
            XElement xml = XElement.Load(filePath);
            foreach (var element in xml.Elements())
            {
                _xmlNodes.Add(new XmlNodeViewModel(element));
            }
        }

        private void XmlTreeView_ContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            _selectedNode = XmlTreeView.SelectedItem as XmlNodeViewModel;
            // Enable/disable menu items based on selection
            var menu = (ContextMenu)XmlTreeView.ContextMenu;
            menu.IsOpen = _selectedNode != null; // Only show if a node is selected
        }

        private void RenameMenuItem_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedNode != null)
            {
                TextBox textBox = new TextBox
                {
                    Text = _selectedNode.Element.Name.LocalName,
                    Width = 150
                };

                textBox.KeyDown += (s, args) =>
                {
                    if (args.Key == Key.Enter)
                    {
                        var newName = textBox.Text;
                        if (!string.IsNullOrWhiteSpace(newName))
                        {
                            RenameNode(_selectedNode, newName);
                        }
                    }
                };

                XmlTreeView.Items.Remove(_selectedNode);
                XmlTreeView.Items.Add(textBox);
                textBox.Focus();
            }
        }

        private void RenameNode(XmlNodeViewModel node, string newName)
        {
            node.Element.Name = XName.Get(newName);
            UpdateXmlFile();
            XmlTreeView.Items.Refresh();
        }

        private void DeleteMenuItem_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedNode != null)
            {
                _xmlNodes.Remove(_selectedNode);
                UpdateXmlFile();
            }
        }

        private void UpdateXmlFile()
        {
            // Save the updated XML back to the file
            // Implement this method to save your XML structure back to the original file.
            // You can serialize your ObservableCollection back to XML.
        }
    }

    public class XmlNodeViewModel
    {
        public XElement Element { get; set; }

        public XmlNodeViewModel(XElement element)
        {
            Element = element;
        }

        public string Name => Element.Name.LocalName;

        // Add any additional properties you need to display in the TreeView
    }
}













private void UpdateXmlFile()
{
    // Serialize the observable collection back to XML
    XElement root = new XElement("Repository", _xmlNodes.Select(n => n.Element));
    root.Save(FilePathTextBox.Text); // Save to the same file
}
