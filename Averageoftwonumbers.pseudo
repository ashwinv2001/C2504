using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.Windows;

private string GetProcessPath(int processId)
{
    try
    {
        string query = $"SELECT ExecutablePath FROM Win32_Process WHERE ProcessId = {processId}";
        using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(query))
        using (ManagementObjectCollection results = searcher.Get())
        {
            foreach (ManagementObject mo in results)
            {
                return mo["ExecutablePath"]?.ToString();
            }
        }
    }
    catch
    {
        return null; // Return null if access is denied
    }
    return null;
}

private void KillProcessByName(string processName)
{
    try
    {
        string windowsAppsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "WindowsApps");

        Process[] processes = Process.GetProcessesByName(processName);
        bool isUwpApp = false;

        foreach (var process in processes)
        {
            string exePath = GetProcessPath(process.Id); // Get process path via WMI

            if (!string.IsNullOrEmpty(exePath) && exePath.StartsWith(windowsAppsPath, StringComparison.OrdinalIgnoreCase))
            {
                isUwpApp = true;
                process.Kill();
                Debug.WriteLine($"Killed UWP Process: {process.ProcessName}");
            }
        }

        if (!isUwpApp)
        {
            MessageBox.Show("NOT a UWP APP", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
