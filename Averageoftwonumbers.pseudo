using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows;

namespace Wpftest3
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);

        private const int SW_RESTORE = 9;  // Restore window if minimized

        private void BringUWPToForeground(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(ProcessIdTextBox.Text, out int processId))
            {
                try
                {
                    Process process = Process.GetProcessById(processId);
                    IntPtr hwnd = GetMainWindowHandle(process);

                    if (hwnd != IntPtr.Zero)
                    {
                        ShowWindowAsync(hwnd, SW_RESTORE);
                        SetForegroundWindow(hwnd);
                        StatusText.Text = "App brought to foreground!";
                    }
                    else
                    {
                        StatusText.Text = "Could not find a valid window handle.";
                    }
                }
                catch (Exception ex)
                {
                    StatusText.Text = "Error: " + ex.Message;
                }
            }
            else
            {
                StatusText.Text = "Invalid Process ID.";
            }
        }

        private IntPtr GetMainWindowHandle(Process process)
        {
            process.Refresh(); // Refresh to update the window handle
            return process.MainWindowHandle;
        }
    }
}
