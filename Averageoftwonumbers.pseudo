public class TreeNodeViewModel : INotifyPropertyChanged
{
    private string _name;
    private bool _isEditing;

    public string Name
    {
        get => _name;
        set
        {
            _name = value;
            OnPropertyChanged(nameof(Name));
        }
    }

    public bool IsEditing
    {
        get => _isEditing;
        set
        {
            _isEditing = value;
            OnPropertyChanged(nameof(IsEditing));
        }
    }

    public ICommand RenameCommand { get; }
    public ICommand DeleteCommand { get; }

    public TreeNodeViewModel()
    {
        RenameCommand = new RelayCommand(OnRename);
        DeleteCommand = new RelayCommand(OnDelete);
    }

    private void OnRename()
    {
        IsEditing = true;
    }

    private void OnDelete()
    {
        // Logic to delete the node
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
