using System;
using System.Collections.ObjectModel;
using System.Linq;

namespace BankManagementSystem.Databases
{
    /// <summary>
    /// Represents a repository for managing accounts in memory.
    /// </summary>
    public class AccountMemoryRepo : IAccountRepo
    {
        private static AccountMemoryRepo _instance;
        private ObservableCollection<Account> accounts;

        private AccountMemoryRepo()
        {
            accounts = new ObservableCollection<Account>();
            InitializeAccounts();
        }

        public static AccountMemoryRepo Instance => _instance ??= new AccountMemoryRepo();

        private void InitializeAccounts()
        {
            accounts.Add(new Account
            {
                AccountNumber = 12340,
                Name = "Minnu",
                Balance = 0,
                Type = "savings",
                Email = "minnu@gmail.com",
                PhoneNumber = "5236526526",
                Address = "Address",
                IsActive = true,
                InterestPercentage = "10",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            });
            // Add more accounts as needed here...
        }

        public ObservableCollection<Account> ReadAll()
        {
            return accounts;
        }

        public void Add(Account account)
        {
            if (!accounts.Contains(account))
            {
                accounts.Add(account);
            }
        }

        public void Update(Account account)
        {
            var existingAccount = accounts.FirstOrDefault(a => a.AccountNumber == account.AccountNumber);
            if (existingAccount != null)
            {
                existingAccount.Name = account.Name;
                existingAccount.Balance = account.Balance;
                existingAccount.Address = account.Address;
                existingAccount.Email = account.Email;
                existingAccount.PhoneNumber = account.PhoneNumber;
                existingAccount.InterestPercentage = account.InterestPercentage;
                existingAccount.Type = account.Type;
                existingAccount.IsActive = account.IsActive;
                existingAccount.TransactionCount = account.TransactionCount;
                existingAccount.LastTransactionDate = account.LastTransactionDate;
            }
            else
            {
                throw new AccountException("Account does not exist.");
            }
        }

        public void Delete(Account account)
        {
            var existingAccount = accounts.FirstOrDefault(a => a.AccountNumber == account.AccountNumber);
            if (existingAccount != null)
            {
                accounts.Remove(existingAccount);
            }
            else
            {
                throw new AccountException("Account does not exist.");
            }
        }

        public void Deposit(int accountNumber, int amount)
        {
            var account = accounts.FirstOrDefault(a => a.AccountNumber == accountNumber);
            if (account != null)
            {
                account.Balance += amount;
                account.LastTransactionDate = DateTime.Now;
                account.TransactionCount++;
            }
            else
            {
                throw new AccountException("Account not found.");
            }
        }

        public void Withdraw(int accountNumber, int amount)
        {
            var account = accounts.FirstOrDefault(a => a.AccountNumber == accountNumber);
            if (account != null)
            {
                if (account.Balance < amount)
                {
                    throw new AccountException("Insufficient balance.");
                }
                account.Balance -= amount;
                account.LastTransactionDate = DateTime.Now;
                account.TransactionCount++;
            }
            else
            {
                throw new AccountException("Account not found.");
            }
        }

        public void CalculateInterestAndUpdateBalance()
        {
            // Future implementation of interest calculation and balance update
            throw new NotImplementedException("Calculate interest and update balance is not yet implemented.");
        }
    }
}
