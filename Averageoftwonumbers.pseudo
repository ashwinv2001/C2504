using System;
using System.Windows.Input;

// RelayCommand is a utility class that allows binding commands from the view (XAML) to the ViewModel in the MVVM architecture.
namespace deserialization
{
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _executeWithParameter;
        private readonly Action _executeWithoutParameter;
        private readonly Func<object, bool> _canExecuteWithParameter;
        private readonly Func<bool> _canExecuteWithoutParameter;

        // Event that is raised whenever the command's ability to execute changes
        public event EventHandler CanExecuteChanged;

        // Constructor for commands without parameters
        public RelayCommand(Action executeWithoutParameter, Func<bool> canExecuteWithoutParameter = null)
        {
            _executeWithoutParameter = executeWithoutParameter;
            _canExecuteWithoutParameter = canExecuteWithoutParameter;
        }

        // Constructor for commands with parameters
        public RelayCommand(Action<object> executeWithParameter, Func<object, bool> canExecuteWithParameter = null)
        {
            _executeWithParameter = executeWithParameter;
            _canExecuteWithParameter = canExecuteWithParameter;
        }

        // Determines whether the command can execute (supports both parameter and non-parameter versions)
        public bool CanExecute(object parameter)
        {
            if (_canExecuteWithParameter != null)
                return _canExecuteWithParameter(parameter);

            if (_canExecuteWithoutParameter != null)
                return _canExecuteWithoutParameter();

            return true; // Can execute by default if no canExecute logic is provided
        }

        // Executes the command (supports both parameter and non-parameter versions)
        public void Execute(object parameter)
        {
            if (_executeWithParameter != null)
                _executeWithParameter(parameter);
            else
                _executeWithoutParameter?.Invoke();
        }

        // Triggers the CanExecuteChanged event to notify the view to reevaluate whether the command can execute
        public void RaiseCanExecuteChanged()
        {
            CanExecuteChanged?.Invoke(this, EventArgs.Empty);
        }
    }
}
