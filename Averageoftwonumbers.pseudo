using System.Collections.ObjectModel;
using System.Xml.Linq;

namespace deserialization
{
    public class XmlNodeViewModel
    {
        public XElement XmlElement { get; set; } // Updated property name to XmlElement
        public string Name 
        { 
            get => XmlElement.Name.LocalName; 
            set => XmlElement.Name = XName.Get(value); // Directly sets XML element's name
        }
        public ObservableCollection<XmlNodeViewModel> Children { get; set; } = new ObservableCollection<XmlNodeViewModel>();
        public bool IsEditing { get; set; } = false;

        public XmlNodeViewModel(XElement element)
        {
            XmlElement = element;
            foreach (var child in element.Elements())
            {
                Children.Add(new XmlNodeViewModel(child));
            }
        }
    }
}






private void RenameNode()
{
    if (SelectedNode != null)
    {
        string newName = PromptForInput("Enter new name for the node:", SelectedNode.Name);
        if (!string.IsNullOrEmpty(newName))
        {
            // Rename directly using Name property which updates the XElement's name
            SelectedNode.Name = newName;
            SaveXmlChanges();
            OnPropertyChanged(nameof(XmlTree));
        }
    }
}

private void DeleteNode()
{
    if (SelectedNode != null && SelectedNode.XmlElement != null)
    {
        var parentElement = SelectedNode.XmlElement.Parent;
        if (parentElement != null)
        {
            SelectedNode.XmlElement.Remove();
            SaveXmlChanges();

            var parentViewModel = FindParentNode(SelectedNode);
            parentViewModel?.Children.Remove(SelectedNode);
            OnPropertyChanged(nameof(XmlTree));
        }
    }
}

