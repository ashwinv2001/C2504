namespace CalculatorMVVM.Models
{
    public class CalculatorModel
    {
        public double FirstNumber { get; set; }
        public double SecondNumber { get; set; }

        public double Add() => FirstNumber + SecondNumber;
        public double Subtract() => FirstNumber - SecondNumber;
        public double Multiply() => FirstNumber * SecondNumber;
        public double Divide() => SecondNumber != 0 ? FirstNumber / SecondNumber : double.NaN;
    }
}








using System;
using System.Windows.Input;

namespace CalculatorMVVM
{
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Predicate<object>? _canExecute;

        public RelayCommand(Action<object> execute, Predicate<object>? canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object? parameter) => _canExecute?.Invoke(parameter!) ?? true;
        public void Execute(object? parameter) => _execute(parameter!);
        public event EventHandler? CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value!;
            remove => CommandManager.RequerySuggested -= value!;
        }
    }
}







using CalculatorMVVM.Models;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;

namespace CalculatorMVVM.ViewModels
{
    public class CalculatorViewModel : INotifyPropertyChanged
    {
        private double _firstNumber;
        private double _secondNumber;
        private double _result;

        private readonly CalculatorModel _model;

        public double FirstNumber
        {
            get => _firstNumber;
            set { _firstNumber = value; OnPropertyChanged(); }
        }

        public double SecondNumber
        {
            get => _secondNumber;
            set { _secondNumber = value; OnPropertyChanged(); }
        }

        public double Result
        {
            get => _result;
            set { _result = value; OnPropertyChanged(); }
        }

        public ICommand AddCommand { get; }
        public ICommand SubtractCommand { get; }
        public ICommand MultiplyCommand { get; }
        public ICommand DivideCommand { get; }

        public CalculatorViewModel()
        {
            _model = new CalculatorModel();

            AddCommand = new RelayCommand(_ => ExecuteOperation("Add"));
            SubtractCommand = new RelayCommand(_ => ExecuteOperation("Subtract"));
            MultiplyCommand = new RelayCommand(_ => ExecuteOperation("Multiply"));
            DivideCommand = new RelayCommand(_ => ExecuteOperation("Divide"));
        }

        private void ExecuteOperation(string operation)
        {
            _model.FirstNumber = FirstNumber;
            _model.SecondNumber = SecondNumber;

            Result = operation switch
            {
                "Add" => _model.Add(),
                "Subtract" => _model.Subtract(),
                "Multiply" => _model.Multiply(),
                "Divide" => _model.Divide(),
                _ => 0
            };
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        private void OnPropertyChanged([CallerMemberName] string? propertyName = null)
            => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}





<Window x:Class="CalculatorMVVM.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:CalculatorMVVM.ViewModels"
        Title="MVVM Calculator" Height="300" Width="400">
    <Window.DataContext>
        <vm:CalculatorViewModel />
    </Window.DataContext>

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <TextBlock Text="First Number:" Width="100" VerticalAlignment="Center"/>
            <TextBox Width="200" Text="{Binding FirstNumber, UpdateSourceTrigger=PropertyChanged}" />
        </StackPanel>

        <StackPanel Orientation="Horizontal" Margin="0,0,0,10" Grid.Row="1">
            <TextBlock Text="Second Number:" Width="100" VerticalAlignment="Center"/>
            <TextBox Width="200" Text="{Binding SecondNumber, UpdateSourceTrigger=PropertyChanged}" />
        </StackPanel>

        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,10" Grid.Row="2">
            <Button Content="+" Width="50" Margin="5" Command="{Binding AddCommand}" />
            <Button Content="-" Width="50" Margin="5" Command="{Binding SubtractCommand}" />
            <Button Content="ร" Width="50" Margin="5" Command="{Binding MultiplyCommand}" />
            <Button Content="รท" Width="50" Margin="5" Command="{Binding DivideCommand}" />
        </StackPanel>

        <TextBlock Grid.Row="3" Text="{Binding Result}" FontSize="24" FontWeight="Bold" 
                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>
</Window>




